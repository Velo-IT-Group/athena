/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TokenSetupImport } from './routes/token-setup'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as SettingsRouteImport } from './routes/settings/route'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as AuthedIndexImport } from './routes/_authed/index'
import { Route as SettingsMembersIndexImport } from './routes/settings/members/index'
import { Route as AuthedTicketsIndexImport } from './routes/_authed/tickets/index'
import { Route as AuthedTeamsIndexImport } from './routes/_authed/teams/index'
import { Route as AuthedProposalsIndexImport } from './routes/_authed/proposals/index'
import { Route as AuthedCoordinatorViewIndexImport } from './routes/_authed/coordinator-view/index'
import { Route as AuthedContactsIndexImport } from './routes/_authed/contacts/index'
import { Route as AuthedCompaniesIndexImport } from './routes/_authed/companies/index'
import { Route as AuthedTicketsIdImport } from './routes/_authed/tickets/$id'
import { Route as AuthedEngagementsSidImport } from './routes/_authed/engagements/$sid'
import { Route as SettingsMembersIdRouteImport } from './routes/settings/members/$id/route'
import { Route as AuthedTeamsIdRouteImport } from './routes/_authed/teams/$id/route'
import { Route as AuthedContactsIdRouteImport } from './routes/_authed/contacts/$id/route'
import { Route as AuthedCompaniesIdRouteImport } from './routes/_authed/companies/$id/route'
import { Route as SettingsMembersIdIndexImport } from './routes/settings/members/$id/index'
import { Route as ReviewIdVersionIndexImport } from './routes/review/$id/$version/index'
import { Route as AuthedTeamsIdIndexImport } from './routes/_authed/teams/$id/index'
import { Route as AuthedContactsIdIndexImport } from './routes/_authed/contacts/$id/index'
import { Route as AuthedCompaniesIdIndexImport } from './routes/_authed/companies/$id/index'
import { Route as AuthedTeamsIdCalendarImport } from './routes/_authed/teams/$id/calendar'
import { Route as AuthedProposalsNewBlankImport } from './routes/_authed/proposals/new/blank'
import { Route as AuthedContactsIdTicketsImport } from './routes/_authed/contacts/$id/tickets'
import { Route as AuthedContactsIdConfigurationsImport } from './routes/_authed/contacts/$id/configurations'
import { Route as AuthedCompaniesIdTicketsImport } from './routes/_authed/companies/$id/tickets'
import { Route as AuthedCompaniesIdProposalsImport } from './routes/_authed/companies/$id/proposals'
import { Route as AuthedCompaniesIdContactsImport } from './routes/_authed/companies/$id/contacts'
import { Route as AuthedCompaniesIdConfigurationsImport } from './routes/_authed/companies/$id/configurations'
import { Route as AuthedProposalsIdVersionRouteImport } from './routes/_authed/proposals/$id/$version/route'
import { Route as AuthedProposalsIdVersionIndexImport } from './routes/_authed/proposals/$id/$version/index'
import { Route as AuthedProposalsIdVersionWorkplanImport } from './routes/_authed/proposals/$id/$version/workplan'
import { Route as AuthedProposalsIdVersionSettingsImport } from './routes/_authed/proposals/$id/$version/settings'
import { Route as AuthedProposalsIdVersionProductsImport } from './routes/_authed/proposals/$id/$version/products'

// Create/Update Routes

const TokenSetupRoute = TokenSetupImport.update({
  id: '/token-setup',
  path: '/token-setup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const SettingsMembersIndexRoute = SettingsMembersIndexImport.update({
  id: '/members/',
  path: '/members/',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const AuthedTicketsIndexRoute = AuthedTicketsIndexImport.update({
  id: '/tickets/',
  path: '/tickets/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTeamsIndexRoute = AuthedTeamsIndexImport.update({
  id: '/teams/',
  path: '/teams/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedProposalsIndexRoute = AuthedProposalsIndexImport.update({
  id: '/proposals/',
  path: '/proposals/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedCoordinatorViewIndexRoute = AuthedCoordinatorViewIndexImport.update(
  {
    id: '/coordinator-view/',
    path: '/coordinator-view/',
    getParentRoute: () => AuthedRoute,
  } as any,
)

const AuthedContactsIndexRoute = AuthedContactsIndexImport.update({
  id: '/contacts/',
  path: '/contacts/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedCompaniesIndexRoute = AuthedCompaniesIndexImport.update({
  id: '/companies/',
  path: '/companies/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTicketsIdRoute = AuthedTicketsIdImport.update({
  id: '/tickets/$id',
  path: '/tickets/$id',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedEngagementsSidRoute = AuthedEngagementsSidImport.update({
  id: '/engagements/$sid',
  path: '/engagements/$sid',
  getParentRoute: () => AuthedRoute,
} as any)

const SettingsMembersIdRouteRoute = SettingsMembersIdRouteImport.update({
  id: '/members/$id',
  path: '/members/$id',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const AuthedTeamsIdRouteRoute = AuthedTeamsIdRouteImport.update({
  id: '/teams/$id',
  path: '/teams/$id',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedContactsIdRouteRoute = AuthedContactsIdRouteImport.update({
  id: '/contacts/$id',
  path: '/contacts/$id',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedCompaniesIdRouteRoute = AuthedCompaniesIdRouteImport.update({
  id: '/companies/$id',
  path: '/companies/$id',
  getParentRoute: () => AuthedRoute,
} as any)

const SettingsMembersIdIndexRoute = SettingsMembersIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsMembersIdRouteRoute,
} as any)

const ReviewIdVersionIndexRoute = ReviewIdVersionIndexImport.update({
  id: '/review/$id/$version/',
  path: '/review/$id/$version/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedTeamsIdIndexRoute = AuthedTeamsIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedTeamsIdRouteRoute,
} as any)

const AuthedContactsIdIndexRoute = AuthedContactsIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedContactsIdRouteRoute,
} as any)

const AuthedCompaniesIdIndexRoute = AuthedCompaniesIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedCompaniesIdRouteRoute,
} as any)

const AuthedTeamsIdCalendarRoute = AuthedTeamsIdCalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => AuthedTeamsIdRouteRoute,
} as any)

const AuthedProposalsNewBlankRoute = AuthedProposalsNewBlankImport.update({
  id: '/proposals/new/blank',
  path: '/proposals/new/blank',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedContactsIdTicketsRoute = AuthedContactsIdTicketsImport.update({
  id: '/tickets',
  path: '/tickets',
  getParentRoute: () => AuthedContactsIdRouteRoute,
} as any)

const AuthedContactsIdConfigurationsRoute =
  AuthedContactsIdConfigurationsImport.update({
    id: '/configurations',
    path: '/configurations',
    getParentRoute: () => AuthedContactsIdRouteRoute,
  } as any)

const AuthedCompaniesIdTicketsRoute = AuthedCompaniesIdTicketsImport.update({
  id: '/tickets',
  path: '/tickets',
  getParentRoute: () => AuthedCompaniesIdRouteRoute,
} as any)

const AuthedCompaniesIdProposalsRoute = AuthedCompaniesIdProposalsImport.update(
  {
    id: '/proposals',
    path: '/proposals',
    getParentRoute: () => AuthedCompaniesIdRouteRoute,
  } as any,
)

const AuthedCompaniesIdContactsRoute = AuthedCompaniesIdContactsImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => AuthedCompaniesIdRouteRoute,
} as any)

const AuthedCompaniesIdConfigurationsRoute =
  AuthedCompaniesIdConfigurationsImport.update({
    id: '/configurations',
    path: '/configurations',
    getParentRoute: () => AuthedCompaniesIdRouteRoute,
  } as any)

const AuthedProposalsIdVersionRouteRoute =
  AuthedProposalsIdVersionRouteImport.update({
    id: '/proposals/$id/$version',
    path: '/proposals/$id/$version',
    getParentRoute: () => AuthedRoute,
  } as any)

const AuthedProposalsIdVersionIndexRoute =
  AuthedProposalsIdVersionIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthedProposalsIdVersionRouteRoute,
  } as any)

const AuthedProposalsIdVersionWorkplanRoute =
  AuthedProposalsIdVersionWorkplanImport.update({
    id: '/workplan',
    path: '/workplan',
    getParentRoute: () => AuthedProposalsIdVersionRouteRoute,
  } as any)

const AuthedProposalsIdVersionSettingsRoute =
  AuthedProposalsIdVersionSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthedProposalsIdVersionRouteRoute,
  } as any)

const AuthedProposalsIdVersionProductsRoute =
  AuthedProposalsIdVersionProductsImport.update({
    id: '/products',
    path: '/products',
    getParentRoute: () => AuthedProposalsIdVersionRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/token-setup': {
      id: '/token-setup'
      path: '/token-setup'
      fullPath: '/token-setup'
      preLoaderRoute: typeof TokenSetupImport
      parentRoute: typeof rootRoute
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/_authed/companies/$id': {
      id: '/_authed/companies/$id'
      path: '/companies/$id'
      fullPath: '/companies/$id'
      preLoaderRoute: typeof AuthedCompaniesIdRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/contacts/$id': {
      id: '/_authed/contacts/$id'
      path: '/contacts/$id'
      fullPath: '/contacts/$id'
      preLoaderRoute: typeof AuthedContactsIdRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/teams/$id': {
      id: '/_authed/teams/$id'
      path: '/teams/$id'
      fullPath: '/teams/$id'
      preLoaderRoute: typeof AuthedTeamsIdRouteImport
      parentRoute: typeof AuthedImport
    }
    '/settings/members/$id': {
      id: '/settings/members/$id'
      path: '/members/$id'
      fullPath: '/settings/members/$id'
      preLoaderRoute: typeof SettingsMembersIdRouteImport
      parentRoute: typeof SettingsRouteImport
    }
    '/_authed/engagements/$sid': {
      id: '/_authed/engagements/$sid'
      path: '/engagements/$sid'
      fullPath: '/engagements/$sid'
      preLoaderRoute: typeof AuthedEngagementsSidImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/tickets/$id': {
      id: '/_authed/tickets/$id'
      path: '/tickets/$id'
      fullPath: '/tickets/$id'
      preLoaderRoute: typeof AuthedTicketsIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/companies/': {
      id: '/_authed/companies/'
      path: '/companies'
      fullPath: '/companies'
      preLoaderRoute: typeof AuthedCompaniesIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/contacts/': {
      id: '/_authed/contacts/'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof AuthedContactsIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/coordinator-view/': {
      id: '/_authed/coordinator-view/'
      path: '/coordinator-view'
      fullPath: '/coordinator-view'
      preLoaderRoute: typeof AuthedCoordinatorViewIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/proposals/': {
      id: '/_authed/proposals/'
      path: '/proposals'
      fullPath: '/proposals'
      preLoaderRoute: typeof AuthedProposalsIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/teams/': {
      id: '/_authed/teams/'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof AuthedTeamsIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/tickets/': {
      id: '/_authed/tickets/'
      path: '/tickets'
      fullPath: '/tickets'
      preLoaderRoute: typeof AuthedTicketsIndexImport
      parentRoute: typeof AuthedImport
    }
    '/settings/members/': {
      id: '/settings/members/'
      path: '/members'
      fullPath: '/settings/members'
      preLoaderRoute: typeof SettingsMembersIndexImport
      parentRoute: typeof SettingsRouteImport
    }
    '/_authed/proposals/$id/$version': {
      id: '/_authed/proposals/$id/$version'
      path: '/proposals/$id/$version'
      fullPath: '/proposals/$id/$version'
      preLoaderRoute: typeof AuthedProposalsIdVersionRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/companies/$id/configurations': {
      id: '/_authed/companies/$id/configurations'
      path: '/configurations'
      fullPath: '/companies/$id/configurations'
      preLoaderRoute: typeof AuthedCompaniesIdConfigurationsImport
      parentRoute: typeof AuthedCompaniesIdRouteImport
    }
    '/_authed/companies/$id/contacts': {
      id: '/_authed/companies/$id/contacts'
      path: '/contacts'
      fullPath: '/companies/$id/contacts'
      preLoaderRoute: typeof AuthedCompaniesIdContactsImport
      parentRoute: typeof AuthedCompaniesIdRouteImport
    }
    '/_authed/companies/$id/proposals': {
      id: '/_authed/companies/$id/proposals'
      path: '/proposals'
      fullPath: '/companies/$id/proposals'
      preLoaderRoute: typeof AuthedCompaniesIdProposalsImport
      parentRoute: typeof AuthedCompaniesIdRouteImport
    }
    '/_authed/companies/$id/tickets': {
      id: '/_authed/companies/$id/tickets'
      path: '/tickets'
      fullPath: '/companies/$id/tickets'
      preLoaderRoute: typeof AuthedCompaniesIdTicketsImport
      parentRoute: typeof AuthedCompaniesIdRouteImport
    }
    '/_authed/contacts/$id/configurations': {
      id: '/_authed/contacts/$id/configurations'
      path: '/configurations'
      fullPath: '/contacts/$id/configurations'
      preLoaderRoute: typeof AuthedContactsIdConfigurationsImport
      parentRoute: typeof AuthedContactsIdRouteImport
    }
    '/_authed/contacts/$id/tickets': {
      id: '/_authed/contacts/$id/tickets'
      path: '/tickets'
      fullPath: '/contacts/$id/tickets'
      preLoaderRoute: typeof AuthedContactsIdTicketsImport
      parentRoute: typeof AuthedContactsIdRouteImport
    }
    '/_authed/proposals/new/blank': {
      id: '/_authed/proposals/new/blank'
      path: '/proposals/new/blank'
      fullPath: '/proposals/new/blank'
      preLoaderRoute: typeof AuthedProposalsNewBlankImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/teams/$id/calendar': {
      id: '/_authed/teams/$id/calendar'
      path: '/calendar'
      fullPath: '/teams/$id/calendar'
      preLoaderRoute: typeof AuthedTeamsIdCalendarImport
      parentRoute: typeof AuthedTeamsIdRouteImport
    }
    '/_authed/companies/$id/': {
      id: '/_authed/companies/$id/'
      path: '/'
      fullPath: '/companies/$id/'
      preLoaderRoute: typeof AuthedCompaniesIdIndexImport
      parentRoute: typeof AuthedCompaniesIdRouteImport
    }
    '/_authed/contacts/$id/': {
      id: '/_authed/contacts/$id/'
      path: '/'
      fullPath: '/contacts/$id/'
      preLoaderRoute: typeof AuthedContactsIdIndexImport
      parentRoute: typeof AuthedContactsIdRouteImport
    }
    '/_authed/teams/$id/': {
      id: '/_authed/teams/$id/'
      path: '/'
      fullPath: '/teams/$id/'
      preLoaderRoute: typeof AuthedTeamsIdIndexImport
      parentRoute: typeof AuthedTeamsIdRouteImport
    }
    '/review/$id/$version/': {
      id: '/review/$id/$version/'
      path: '/review/$id/$version'
      fullPath: '/review/$id/$version'
      preLoaderRoute: typeof ReviewIdVersionIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/members/$id/': {
      id: '/settings/members/$id/'
      path: '/'
      fullPath: '/settings/members/$id/'
      preLoaderRoute: typeof SettingsMembersIdIndexImport
      parentRoute: typeof SettingsMembersIdRouteImport
    }
    '/_authed/proposals/$id/$version/products': {
      id: '/_authed/proposals/$id/$version/products'
      path: '/products'
      fullPath: '/proposals/$id/$version/products'
      preLoaderRoute: typeof AuthedProposalsIdVersionProductsImport
      parentRoute: typeof AuthedProposalsIdVersionRouteImport
    }
    '/_authed/proposals/$id/$version/settings': {
      id: '/_authed/proposals/$id/$version/settings'
      path: '/settings'
      fullPath: '/proposals/$id/$version/settings'
      preLoaderRoute: typeof AuthedProposalsIdVersionSettingsImport
      parentRoute: typeof AuthedProposalsIdVersionRouteImport
    }
    '/_authed/proposals/$id/$version/workplan': {
      id: '/_authed/proposals/$id/$version/workplan'
      path: '/workplan'
      fullPath: '/proposals/$id/$version/workplan'
      preLoaderRoute: typeof AuthedProposalsIdVersionWorkplanImport
      parentRoute: typeof AuthedProposalsIdVersionRouteImport
    }
    '/_authed/proposals/$id/$version/': {
      id: '/_authed/proposals/$id/$version/'
      path: '/'
      fullPath: '/proposals/$id/$version/'
      preLoaderRoute: typeof AuthedProposalsIdVersionIndexImport
      parentRoute: typeof AuthedProposalsIdVersionRouteImport
    }
  }
}

// Create and export the route tree

interface SettingsMembersIdRouteRouteChildren {
  SettingsMembersIdIndexRoute: typeof SettingsMembersIdIndexRoute
}

const SettingsMembersIdRouteRouteChildren: SettingsMembersIdRouteRouteChildren =
  {
    SettingsMembersIdIndexRoute: SettingsMembersIdIndexRoute,
  }

const SettingsMembersIdRouteRouteWithChildren =
  SettingsMembersIdRouteRoute._addFileChildren(
    SettingsMembersIdRouteRouteChildren,
  )

interface SettingsRouteRouteChildren {
  SettingsIndexRoute: typeof SettingsIndexRoute
  SettingsMembersIdRouteRoute: typeof SettingsMembersIdRouteRouteWithChildren
  SettingsMembersIndexRoute: typeof SettingsMembersIndexRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsIndexRoute: SettingsIndexRoute,
  SettingsMembersIdRouteRoute: SettingsMembersIdRouteRouteWithChildren,
  SettingsMembersIndexRoute: SettingsMembersIndexRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

interface AuthedCompaniesIdRouteRouteChildren {
  AuthedCompaniesIdConfigurationsRoute: typeof AuthedCompaniesIdConfigurationsRoute
  AuthedCompaniesIdContactsRoute: typeof AuthedCompaniesIdContactsRoute
  AuthedCompaniesIdProposalsRoute: typeof AuthedCompaniesIdProposalsRoute
  AuthedCompaniesIdTicketsRoute: typeof AuthedCompaniesIdTicketsRoute
  AuthedCompaniesIdIndexRoute: typeof AuthedCompaniesIdIndexRoute
}

const AuthedCompaniesIdRouteRouteChildren: AuthedCompaniesIdRouteRouteChildren =
  {
    AuthedCompaniesIdConfigurationsRoute: AuthedCompaniesIdConfigurationsRoute,
    AuthedCompaniesIdContactsRoute: AuthedCompaniesIdContactsRoute,
    AuthedCompaniesIdProposalsRoute: AuthedCompaniesIdProposalsRoute,
    AuthedCompaniesIdTicketsRoute: AuthedCompaniesIdTicketsRoute,
    AuthedCompaniesIdIndexRoute: AuthedCompaniesIdIndexRoute,
  }

const AuthedCompaniesIdRouteRouteWithChildren =
  AuthedCompaniesIdRouteRoute._addFileChildren(
    AuthedCompaniesIdRouteRouteChildren,
  )

interface AuthedContactsIdRouteRouteChildren {
  AuthedContactsIdConfigurationsRoute: typeof AuthedContactsIdConfigurationsRoute
  AuthedContactsIdTicketsRoute: typeof AuthedContactsIdTicketsRoute
  AuthedContactsIdIndexRoute: typeof AuthedContactsIdIndexRoute
}

const AuthedContactsIdRouteRouteChildren: AuthedContactsIdRouteRouteChildren = {
  AuthedContactsIdConfigurationsRoute: AuthedContactsIdConfigurationsRoute,
  AuthedContactsIdTicketsRoute: AuthedContactsIdTicketsRoute,
  AuthedContactsIdIndexRoute: AuthedContactsIdIndexRoute,
}

const AuthedContactsIdRouteRouteWithChildren =
  AuthedContactsIdRouteRoute._addFileChildren(
    AuthedContactsIdRouteRouteChildren,
  )

interface AuthedTeamsIdRouteRouteChildren {
  AuthedTeamsIdCalendarRoute: typeof AuthedTeamsIdCalendarRoute
  AuthedTeamsIdIndexRoute: typeof AuthedTeamsIdIndexRoute
}

const AuthedTeamsIdRouteRouteChildren: AuthedTeamsIdRouteRouteChildren = {
  AuthedTeamsIdCalendarRoute: AuthedTeamsIdCalendarRoute,
  AuthedTeamsIdIndexRoute: AuthedTeamsIdIndexRoute,
}

const AuthedTeamsIdRouteRouteWithChildren =
  AuthedTeamsIdRouteRoute._addFileChildren(AuthedTeamsIdRouteRouteChildren)

interface AuthedProposalsIdVersionRouteRouteChildren {
  AuthedProposalsIdVersionProductsRoute: typeof AuthedProposalsIdVersionProductsRoute
  AuthedProposalsIdVersionSettingsRoute: typeof AuthedProposalsIdVersionSettingsRoute
  AuthedProposalsIdVersionWorkplanRoute: typeof AuthedProposalsIdVersionWorkplanRoute
  AuthedProposalsIdVersionIndexRoute: typeof AuthedProposalsIdVersionIndexRoute
}

const AuthedProposalsIdVersionRouteRouteChildren: AuthedProposalsIdVersionRouteRouteChildren =
  {
    AuthedProposalsIdVersionProductsRoute:
      AuthedProposalsIdVersionProductsRoute,
    AuthedProposalsIdVersionSettingsRoute:
      AuthedProposalsIdVersionSettingsRoute,
    AuthedProposalsIdVersionWorkplanRoute:
      AuthedProposalsIdVersionWorkplanRoute,
    AuthedProposalsIdVersionIndexRoute: AuthedProposalsIdVersionIndexRoute,
  }

const AuthedProposalsIdVersionRouteRouteWithChildren =
  AuthedProposalsIdVersionRouteRoute._addFileChildren(
    AuthedProposalsIdVersionRouteRouteChildren,
  )

interface AuthedRouteChildren {
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedCompaniesIdRouteRoute: typeof AuthedCompaniesIdRouteRouteWithChildren
  AuthedContactsIdRouteRoute: typeof AuthedContactsIdRouteRouteWithChildren
  AuthedTeamsIdRouteRoute: typeof AuthedTeamsIdRouteRouteWithChildren
  AuthedEngagementsSidRoute: typeof AuthedEngagementsSidRoute
  AuthedTicketsIdRoute: typeof AuthedTicketsIdRoute
  AuthedCompaniesIndexRoute: typeof AuthedCompaniesIndexRoute
  AuthedContactsIndexRoute: typeof AuthedContactsIndexRoute
  AuthedCoordinatorViewIndexRoute: typeof AuthedCoordinatorViewIndexRoute
  AuthedProposalsIndexRoute: typeof AuthedProposalsIndexRoute
  AuthedTeamsIndexRoute: typeof AuthedTeamsIndexRoute
  AuthedTicketsIndexRoute: typeof AuthedTicketsIndexRoute
  AuthedProposalsIdVersionRouteRoute: typeof AuthedProposalsIdVersionRouteRouteWithChildren
  AuthedProposalsNewBlankRoute: typeof AuthedProposalsNewBlankRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedCompaniesIdRouteRoute: AuthedCompaniesIdRouteRouteWithChildren,
  AuthedContactsIdRouteRoute: AuthedContactsIdRouteRouteWithChildren,
  AuthedTeamsIdRouteRoute: AuthedTeamsIdRouteRouteWithChildren,
  AuthedEngagementsSidRoute: AuthedEngagementsSidRoute,
  AuthedTicketsIdRoute: AuthedTicketsIdRoute,
  AuthedCompaniesIndexRoute: AuthedCompaniesIndexRoute,
  AuthedContactsIndexRoute: AuthedContactsIndexRoute,
  AuthedCoordinatorViewIndexRoute: AuthedCoordinatorViewIndexRoute,
  AuthedProposalsIndexRoute: AuthedProposalsIndexRoute,
  AuthedTeamsIndexRoute: AuthedTeamsIndexRoute,
  AuthedTicketsIndexRoute: AuthedTicketsIndexRoute,
  AuthedProposalsIdVersionRouteRoute:
    AuthedProposalsIdVersionRouteRouteWithChildren,
  AuthedProposalsNewBlankRoute: AuthedProposalsNewBlankRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/settings': typeof SettingsRouteRouteWithChildren
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/token-setup': typeof TokenSetupRoute
  '/': typeof AuthedIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/companies/$id': typeof AuthedCompaniesIdRouteRouteWithChildren
  '/contacts/$id': typeof AuthedContactsIdRouteRouteWithChildren
  '/teams/$id': typeof AuthedTeamsIdRouteRouteWithChildren
  '/settings/members/$id': typeof SettingsMembersIdRouteRouteWithChildren
  '/engagements/$sid': typeof AuthedEngagementsSidRoute
  '/tickets/$id': typeof AuthedTicketsIdRoute
  '/companies': typeof AuthedCompaniesIndexRoute
  '/contacts': typeof AuthedContactsIndexRoute
  '/coordinator-view': typeof AuthedCoordinatorViewIndexRoute
  '/proposals': typeof AuthedProposalsIndexRoute
  '/teams': typeof AuthedTeamsIndexRoute
  '/tickets': typeof AuthedTicketsIndexRoute
  '/settings/members': typeof SettingsMembersIndexRoute
  '/proposals/$id/$version': typeof AuthedProposalsIdVersionRouteRouteWithChildren
  '/companies/$id/configurations': typeof AuthedCompaniesIdConfigurationsRoute
  '/companies/$id/contacts': typeof AuthedCompaniesIdContactsRoute
  '/companies/$id/proposals': typeof AuthedCompaniesIdProposalsRoute
  '/companies/$id/tickets': typeof AuthedCompaniesIdTicketsRoute
  '/contacts/$id/configurations': typeof AuthedContactsIdConfigurationsRoute
  '/contacts/$id/tickets': typeof AuthedContactsIdTicketsRoute
  '/proposals/new/blank': typeof AuthedProposalsNewBlankRoute
  '/teams/$id/calendar': typeof AuthedTeamsIdCalendarRoute
  '/companies/$id/': typeof AuthedCompaniesIdIndexRoute
  '/contacts/$id/': typeof AuthedContactsIdIndexRoute
  '/teams/$id/': typeof AuthedTeamsIdIndexRoute
  '/review/$id/$version': typeof ReviewIdVersionIndexRoute
  '/settings/members/$id/': typeof SettingsMembersIdIndexRoute
  '/proposals/$id/$version/products': typeof AuthedProposalsIdVersionProductsRoute
  '/proposals/$id/$version/settings': typeof AuthedProposalsIdVersionSettingsRoute
  '/proposals/$id/$version/workplan': typeof AuthedProposalsIdVersionWorkplanRoute
  '/proposals/$id/$version/': typeof AuthedProposalsIdVersionIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/token-setup': typeof TokenSetupRoute
  '/': typeof AuthedIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/engagements/$sid': typeof AuthedEngagementsSidRoute
  '/tickets/$id': typeof AuthedTicketsIdRoute
  '/companies': typeof AuthedCompaniesIndexRoute
  '/contacts': typeof AuthedContactsIndexRoute
  '/coordinator-view': typeof AuthedCoordinatorViewIndexRoute
  '/proposals': typeof AuthedProposalsIndexRoute
  '/teams': typeof AuthedTeamsIndexRoute
  '/tickets': typeof AuthedTicketsIndexRoute
  '/settings/members': typeof SettingsMembersIndexRoute
  '/companies/$id/configurations': typeof AuthedCompaniesIdConfigurationsRoute
  '/companies/$id/contacts': typeof AuthedCompaniesIdContactsRoute
  '/companies/$id/proposals': typeof AuthedCompaniesIdProposalsRoute
  '/companies/$id/tickets': typeof AuthedCompaniesIdTicketsRoute
  '/contacts/$id/configurations': typeof AuthedContactsIdConfigurationsRoute
  '/contacts/$id/tickets': typeof AuthedContactsIdTicketsRoute
  '/proposals/new/blank': typeof AuthedProposalsNewBlankRoute
  '/teams/$id/calendar': typeof AuthedTeamsIdCalendarRoute
  '/companies/$id': typeof AuthedCompaniesIdIndexRoute
  '/contacts/$id': typeof AuthedContactsIdIndexRoute
  '/teams/$id': typeof AuthedTeamsIdIndexRoute
  '/review/$id/$version': typeof ReviewIdVersionIndexRoute
  '/settings/members/$id': typeof SettingsMembersIdIndexRoute
  '/proposals/$id/$version/products': typeof AuthedProposalsIdVersionProductsRoute
  '/proposals/$id/$version/settings': typeof AuthedProposalsIdVersionSettingsRoute
  '/proposals/$id/$version/workplan': typeof AuthedProposalsIdVersionWorkplanRoute
  '/proposals/$id/$version': typeof AuthedProposalsIdVersionIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/token-setup': typeof TokenSetupRoute
  '/_authed/': typeof AuthedIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/_authed/companies/$id': typeof AuthedCompaniesIdRouteRouteWithChildren
  '/_authed/contacts/$id': typeof AuthedContactsIdRouteRouteWithChildren
  '/_authed/teams/$id': typeof AuthedTeamsIdRouteRouteWithChildren
  '/settings/members/$id': typeof SettingsMembersIdRouteRouteWithChildren
  '/_authed/engagements/$sid': typeof AuthedEngagementsSidRoute
  '/_authed/tickets/$id': typeof AuthedTicketsIdRoute
  '/_authed/companies/': typeof AuthedCompaniesIndexRoute
  '/_authed/contacts/': typeof AuthedContactsIndexRoute
  '/_authed/coordinator-view/': typeof AuthedCoordinatorViewIndexRoute
  '/_authed/proposals/': typeof AuthedProposalsIndexRoute
  '/_authed/teams/': typeof AuthedTeamsIndexRoute
  '/_authed/tickets/': typeof AuthedTicketsIndexRoute
  '/settings/members/': typeof SettingsMembersIndexRoute
  '/_authed/proposals/$id/$version': typeof AuthedProposalsIdVersionRouteRouteWithChildren
  '/_authed/companies/$id/configurations': typeof AuthedCompaniesIdConfigurationsRoute
  '/_authed/companies/$id/contacts': typeof AuthedCompaniesIdContactsRoute
  '/_authed/companies/$id/proposals': typeof AuthedCompaniesIdProposalsRoute
  '/_authed/companies/$id/tickets': typeof AuthedCompaniesIdTicketsRoute
  '/_authed/contacts/$id/configurations': typeof AuthedContactsIdConfigurationsRoute
  '/_authed/contacts/$id/tickets': typeof AuthedContactsIdTicketsRoute
  '/_authed/proposals/new/blank': typeof AuthedProposalsNewBlankRoute
  '/_authed/teams/$id/calendar': typeof AuthedTeamsIdCalendarRoute
  '/_authed/companies/$id/': typeof AuthedCompaniesIdIndexRoute
  '/_authed/contacts/$id/': typeof AuthedContactsIdIndexRoute
  '/_authed/teams/$id/': typeof AuthedTeamsIdIndexRoute
  '/review/$id/$version/': typeof ReviewIdVersionIndexRoute
  '/settings/members/$id/': typeof SettingsMembersIdIndexRoute
  '/_authed/proposals/$id/$version/products': typeof AuthedProposalsIdVersionProductsRoute
  '/_authed/proposals/$id/$version/settings': typeof AuthedProposalsIdVersionSettingsRoute
  '/_authed/proposals/$id/$version/workplan': typeof AuthedProposalsIdVersionWorkplanRoute
  '/_authed/proposals/$id/$version/': typeof AuthedProposalsIdVersionIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/settings'
    | ''
    | '/login'
    | '/token-setup'
    | '/'
    | '/settings/'
    | '/companies/$id'
    | '/contacts/$id'
    | '/teams/$id'
    | '/settings/members/$id'
    | '/engagements/$sid'
    | '/tickets/$id'
    | '/companies'
    | '/contacts'
    | '/coordinator-view'
    | '/proposals'
    | '/teams'
    | '/tickets'
    | '/settings/members'
    | '/proposals/$id/$version'
    | '/companies/$id/configurations'
    | '/companies/$id/contacts'
    | '/companies/$id/proposals'
    | '/companies/$id/tickets'
    | '/contacts/$id/configurations'
    | '/contacts/$id/tickets'
    | '/proposals/new/blank'
    | '/teams/$id/calendar'
    | '/companies/$id/'
    | '/contacts/$id/'
    | '/teams/$id/'
    | '/review/$id/$version'
    | '/settings/members/$id/'
    | '/proposals/$id/$version/products'
    | '/proposals/$id/$version/settings'
    | '/proposals/$id/$version/workplan'
    | '/proposals/$id/$version/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/token-setup'
    | '/'
    | '/settings'
    | '/engagements/$sid'
    | '/tickets/$id'
    | '/companies'
    | '/contacts'
    | '/coordinator-view'
    | '/proposals'
    | '/teams'
    | '/tickets'
    | '/settings/members'
    | '/companies/$id/configurations'
    | '/companies/$id/contacts'
    | '/companies/$id/proposals'
    | '/companies/$id/tickets'
    | '/contacts/$id/configurations'
    | '/contacts/$id/tickets'
    | '/proposals/new/blank'
    | '/teams/$id/calendar'
    | '/companies/$id'
    | '/contacts/$id'
    | '/teams/$id'
    | '/review/$id/$version'
    | '/settings/members/$id'
    | '/proposals/$id/$version/products'
    | '/proposals/$id/$version/settings'
    | '/proposals/$id/$version/workplan'
    | '/proposals/$id/$version'
  id:
    | '__root__'
    | '/settings'
    | '/_authed'
    | '/login'
    | '/token-setup'
    | '/_authed/'
    | '/settings/'
    | '/_authed/companies/$id'
    | '/_authed/contacts/$id'
    | '/_authed/teams/$id'
    | '/settings/members/$id'
    | '/_authed/engagements/$sid'
    | '/_authed/tickets/$id'
    | '/_authed/companies/'
    | '/_authed/contacts/'
    | '/_authed/coordinator-view/'
    | '/_authed/proposals/'
    | '/_authed/teams/'
    | '/_authed/tickets/'
    | '/settings/members/'
    | '/_authed/proposals/$id/$version'
    | '/_authed/companies/$id/configurations'
    | '/_authed/companies/$id/contacts'
    | '/_authed/companies/$id/proposals'
    | '/_authed/companies/$id/tickets'
    | '/_authed/contacts/$id/configurations'
    | '/_authed/contacts/$id/tickets'
    | '/_authed/proposals/new/blank'
    | '/_authed/teams/$id/calendar'
    | '/_authed/companies/$id/'
    | '/_authed/contacts/$id/'
    | '/_authed/teams/$id/'
    | '/review/$id/$version/'
    | '/settings/members/$id/'
    | '/_authed/proposals/$id/$version/products'
    | '/_authed/proposals/$id/$version/settings'
    | '/_authed/proposals/$id/$version/workplan'
    | '/_authed/proposals/$id/$version/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  TokenSetupRoute: typeof TokenSetupRoute
  ReviewIdVersionIndexRoute: typeof ReviewIdVersionIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  TokenSetupRoute: TokenSetupRoute,
  ReviewIdVersionIndexRoute: ReviewIdVersionIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/settings",
        "/_authed",
        "/login",
        "/token-setup",
        "/review/$id/$version/"
      ]
    },
    "/settings": {
      "filePath": "settings/route.tsx",
      "children": [
        "/settings/",
        "/settings/members/$id",
        "/settings/members/"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/",
        "/_authed/companies/$id",
        "/_authed/contacts/$id",
        "/_authed/teams/$id",
        "/_authed/engagements/$sid",
        "/_authed/tickets/$id",
        "/_authed/companies/",
        "/_authed/contacts/",
        "/_authed/coordinator-view/",
        "/_authed/proposals/",
        "/_authed/teams/",
        "/_authed/tickets/",
        "/_authed/proposals/$id/$version",
        "/_authed/proposals/new/blank"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/token-setup": {
      "filePath": "token-setup.tsx"
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    },
    "/settings/": {
      "filePath": "settings/index.tsx",
      "parent": "/settings"
    },
    "/_authed/companies/$id": {
      "filePath": "_authed/companies/$id/route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/companies/$id/configurations",
        "/_authed/companies/$id/contacts",
        "/_authed/companies/$id/proposals",
        "/_authed/companies/$id/tickets",
        "/_authed/companies/$id/"
      ]
    },
    "/_authed/contacts/$id": {
      "filePath": "_authed/contacts/$id/route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/contacts/$id/configurations",
        "/_authed/contacts/$id/tickets",
        "/_authed/contacts/$id/"
      ]
    },
    "/_authed/teams/$id": {
      "filePath": "_authed/teams/$id/route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/teams/$id/calendar",
        "/_authed/teams/$id/"
      ]
    },
    "/settings/members/$id": {
      "filePath": "settings/members/$id/route.tsx",
      "parent": "/settings",
      "children": [
        "/settings/members/$id/"
      ]
    },
    "/_authed/engagements/$sid": {
      "filePath": "_authed/engagements/$sid.tsx",
      "parent": "/_authed"
    },
    "/_authed/tickets/$id": {
      "filePath": "_authed/tickets/$id.tsx",
      "parent": "/_authed"
    },
    "/_authed/companies/": {
      "filePath": "_authed/companies/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/contacts/": {
      "filePath": "_authed/contacts/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/coordinator-view/": {
      "filePath": "_authed/coordinator-view/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/proposals/": {
      "filePath": "_authed/proposals/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/teams/": {
      "filePath": "_authed/teams/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/tickets/": {
      "filePath": "_authed/tickets/index.tsx",
      "parent": "/_authed"
    },
    "/settings/members/": {
      "filePath": "settings/members/index.tsx",
      "parent": "/settings"
    },
    "/_authed/proposals/$id/$version": {
      "filePath": "_authed/proposals/$id/$version/route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/proposals/$id/$version/products",
        "/_authed/proposals/$id/$version/settings",
        "/_authed/proposals/$id/$version/workplan",
        "/_authed/proposals/$id/$version/"
      ]
    },
    "/_authed/companies/$id/configurations": {
      "filePath": "_authed/companies/$id/configurations.tsx",
      "parent": "/_authed/companies/$id"
    },
    "/_authed/companies/$id/contacts": {
      "filePath": "_authed/companies/$id/contacts.tsx",
      "parent": "/_authed/companies/$id"
    },
    "/_authed/companies/$id/proposals": {
      "filePath": "_authed/companies/$id/proposals.tsx",
      "parent": "/_authed/companies/$id"
    },
    "/_authed/companies/$id/tickets": {
      "filePath": "_authed/companies/$id/tickets.tsx",
      "parent": "/_authed/companies/$id"
    },
    "/_authed/contacts/$id/configurations": {
      "filePath": "_authed/contacts/$id/configurations.tsx",
      "parent": "/_authed/contacts/$id"
    },
    "/_authed/contacts/$id/tickets": {
      "filePath": "_authed/contacts/$id/tickets.tsx",
      "parent": "/_authed/contacts/$id"
    },
    "/_authed/proposals/new/blank": {
      "filePath": "_authed/proposals/new/blank.tsx",
      "parent": "/_authed"
    },
    "/_authed/teams/$id/calendar": {
      "filePath": "_authed/teams/$id/calendar.tsx",
      "parent": "/_authed/teams/$id"
    },
    "/_authed/companies/$id/": {
      "filePath": "_authed/companies/$id/index.tsx",
      "parent": "/_authed/companies/$id"
    },
    "/_authed/contacts/$id/": {
      "filePath": "_authed/contacts/$id/index.tsx",
      "parent": "/_authed/contacts/$id"
    },
    "/_authed/teams/$id/": {
      "filePath": "_authed/teams/$id/index.tsx",
      "parent": "/_authed/teams/$id"
    },
    "/review/$id/$version/": {
      "filePath": "review/$id/$version/index.tsx"
    },
    "/settings/members/$id/": {
      "filePath": "settings/members/$id/index.tsx",
      "parent": "/settings/members/$id"
    },
    "/_authed/proposals/$id/$version/products": {
      "filePath": "_authed/proposals/$id/$version/products.tsx",
      "parent": "/_authed/proposals/$id/$version"
    },
    "/_authed/proposals/$id/$version/settings": {
      "filePath": "_authed/proposals/$id/$version/settings.tsx",
      "parent": "/_authed/proposals/$id/$version"
    },
    "/_authed/proposals/$id/$version/workplan": {
      "filePath": "_authed/proposals/$id/$version/workplan.tsx",
      "parent": "/_authed/proposals/$id/$version"
    },
    "/_authed/proposals/$id/$version/": {
      "filePath": "_authed/proposals/$id/$version/index.tsx",
      "parent": "/_authed/proposals/$id/$version"
    }
  }
}
ROUTE_MANIFEST_END */
