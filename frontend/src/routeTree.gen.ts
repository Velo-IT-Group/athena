/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthAuthCodeErrorImport } from './routes/auth/auth-code-error'
import { Route as AuthedProposalsIndexImport } from './routes/_authed/proposals/index'
import { Route as ReviewIdVersionIndexImport } from './routes/review/$id/$version/index'
import { Route as AuthedProposalsNewBlankImport } from './routes/_authed/proposals/new/blank'
import { Route as AuthedProposalsIdVersionRouteImport } from './routes/_authed/proposals/$id/$version/route'
import { Route as AuthedProposalsIdVersionIndexImport } from './routes/_authed/proposals/$id/$version/index'
import { Route as AuthedProposalsIdVersionWorkplanImport } from './routes/_authed/proposals/$id/$version/workplan'
import { Route as AuthedProposalsIdVersionSettingsImport } from './routes/_authed/proposals/$id/$version/settings'
import { Route as AuthedProposalsIdVersionProductsImport } from './routes/_authed/proposals/$id/$version/products'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthAuthCodeErrorRoute = AuthAuthCodeErrorImport.update({
  id: '/auth/auth-code-error',
  path: '/auth/auth-code-error',
  getParentRoute: () => rootRoute,
} as any)

const AuthedProposalsIndexRoute = AuthedProposalsIndexImport.update({
  id: '/proposals/',
  path: '/proposals/',
  getParentRoute: () => AuthedRoute,
} as any)

const ReviewIdVersionIndexRoute = ReviewIdVersionIndexImport.update({
  id: '/review/$id/$version/',
  path: '/review/$id/$version/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedProposalsNewBlankRoute = AuthedProposalsNewBlankImport.update({
  id: '/proposals/new/blank',
  path: '/proposals/new/blank',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedProposalsIdVersionRouteRoute =
  AuthedProposalsIdVersionRouteImport.update({
    id: '/proposals/$id/$version',
    path: '/proposals/$id/$version',
    getParentRoute: () => AuthedRoute,
  } as any)

const AuthedProposalsIdVersionIndexRoute =
  AuthedProposalsIdVersionIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthedProposalsIdVersionRouteRoute,
  } as any)

const AuthedProposalsIdVersionWorkplanRoute =
  AuthedProposalsIdVersionWorkplanImport.update({
    id: '/workplan',
    path: '/workplan',
    getParentRoute: () => AuthedProposalsIdVersionRouteRoute,
  } as any)

const AuthedProposalsIdVersionSettingsRoute =
  AuthedProposalsIdVersionSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthedProposalsIdVersionRouteRoute,
  } as any)

const AuthedProposalsIdVersionProductsRoute =
  AuthedProposalsIdVersionProductsImport.update({
    id: '/products',
    path: '/products',
    getParentRoute: () => AuthedProposalsIdVersionRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/auth-code-error': {
      id: '/auth/auth-code-error'
      path: '/auth/auth-code-error'
      fullPath: '/auth/auth-code-error'
      preLoaderRoute: typeof AuthAuthCodeErrorImport
      parentRoute: typeof rootRoute
    }
    '/_authed/proposals/': {
      id: '/_authed/proposals/'
      path: '/proposals'
      fullPath: '/proposals'
      preLoaderRoute: typeof AuthedProposalsIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/proposals/$id/$version': {
      id: '/_authed/proposals/$id/$version'
      path: '/proposals/$id/$version'
      fullPath: '/proposals/$id/$version'
      preLoaderRoute: typeof AuthedProposalsIdVersionRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/proposals/new/blank': {
      id: '/_authed/proposals/new/blank'
      path: '/proposals/new/blank'
      fullPath: '/proposals/new/blank'
      preLoaderRoute: typeof AuthedProposalsNewBlankImport
      parentRoute: typeof AuthedImport
    }
    '/review/$id/$version/': {
      id: '/review/$id/$version/'
      path: '/review/$id/$version'
      fullPath: '/review/$id/$version'
      preLoaderRoute: typeof ReviewIdVersionIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed/proposals/$id/$version/products': {
      id: '/_authed/proposals/$id/$version/products'
      path: '/products'
      fullPath: '/proposals/$id/$version/products'
      preLoaderRoute: typeof AuthedProposalsIdVersionProductsImport
      parentRoute: typeof AuthedProposalsIdVersionRouteImport
    }
    '/_authed/proposals/$id/$version/settings': {
      id: '/_authed/proposals/$id/$version/settings'
      path: '/settings'
      fullPath: '/proposals/$id/$version/settings'
      preLoaderRoute: typeof AuthedProposalsIdVersionSettingsImport
      parentRoute: typeof AuthedProposalsIdVersionRouteImport
    }
    '/_authed/proposals/$id/$version/workplan': {
      id: '/_authed/proposals/$id/$version/workplan'
      path: '/workplan'
      fullPath: '/proposals/$id/$version/workplan'
      preLoaderRoute: typeof AuthedProposalsIdVersionWorkplanImport
      parentRoute: typeof AuthedProposalsIdVersionRouteImport
    }
    '/_authed/proposals/$id/$version/': {
      id: '/_authed/proposals/$id/$version/'
      path: '/'
      fullPath: '/proposals/$id/$version/'
      preLoaderRoute: typeof AuthedProposalsIdVersionIndexImport
      parentRoute: typeof AuthedProposalsIdVersionRouteImport
    }
  }
}

// Create and export the route tree

interface AuthedProposalsIdVersionRouteRouteChildren {
  AuthedProposalsIdVersionProductsRoute: typeof AuthedProposalsIdVersionProductsRoute
  AuthedProposalsIdVersionSettingsRoute: typeof AuthedProposalsIdVersionSettingsRoute
  AuthedProposalsIdVersionWorkplanRoute: typeof AuthedProposalsIdVersionWorkplanRoute
  AuthedProposalsIdVersionIndexRoute: typeof AuthedProposalsIdVersionIndexRoute
}

const AuthedProposalsIdVersionRouteRouteChildren: AuthedProposalsIdVersionRouteRouteChildren =
  {
    AuthedProposalsIdVersionProductsRoute:
      AuthedProposalsIdVersionProductsRoute,
    AuthedProposalsIdVersionSettingsRoute:
      AuthedProposalsIdVersionSettingsRoute,
    AuthedProposalsIdVersionWorkplanRoute:
      AuthedProposalsIdVersionWorkplanRoute,
    AuthedProposalsIdVersionIndexRoute: AuthedProposalsIdVersionIndexRoute,
  }

const AuthedProposalsIdVersionRouteRouteWithChildren =
  AuthedProposalsIdVersionRouteRoute._addFileChildren(
    AuthedProposalsIdVersionRouteRouteChildren,
  )

interface AuthedRouteChildren {
  AuthedProposalsIndexRoute: typeof AuthedProposalsIndexRoute
  AuthedProposalsIdVersionRouteRoute: typeof AuthedProposalsIdVersionRouteRouteWithChildren
  AuthedProposalsNewBlankRoute: typeof AuthedProposalsNewBlankRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedProposalsIndexRoute: AuthedProposalsIndexRoute,
  AuthedProposalsIdVersionRouteRoute:
    AuthedProposalsIdVersionRouteRouteWithChildren,
  AuthedProposalsNewBlankRoute: AuthedProposalsNewBlankRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/auth/auth-code-error': typeof AuthAuthCodeErrorRoute
  '/proposals': typeof AuthedProposalsIndexRoute
  '/proposals/$id/$version': typeof AuthedProposalsIdVersionRouteRouteWithChildren
  '/proposals/new/blank': typeof AuthedProposalsNewBlankRoute
  '/review/$id/$version': typeof ReviewIdVersionIndexRoute
  '/proposals/$id/$version/products': typeof AuthedProposalsIdVersionProductsRoute
  '/proposals/$id/$version/settings': typeof AuthedProposalsIdVersionSettingsRoute
  '/proposals/$id/$version/workplan': typeof AuthedProposalsIdVersionWorkplanRoute
  '/proposals/$id/$version/': typeof AuthedProposalsIdVersionIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/auth/auth-code-error': typeof AuthAuthCodeErrorRoute
  '/proposals': typeof AuthedProposalsIndexRoute
  '/proposals/new/blank': typeof AuthedProposalsNewBlankRoute
  '/review/$id/$version': typeof ReviewIdVersionIndexRoute
  '/proposals/$id/$version/products': typeof AuthedProposalsIdVersionProductsRoute
  '/proposals/$id/$version/settings': typeof AuthedProposalsIdVersionSettingsRoute
  '/proposals/$id/$version/workplan': typeof AuthedProposalsIdVersionWorkplanRoute
  '/proposals/$id/$version': typeof AuthedProposalsIdVersionIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/auth/auth-code-error': typeof AuthAuthCodeErrorRoute
  '/_authed/proposals/': typeof AuthedProposalsIndexRoute
  '/_authed/proposals/$id/$version': typeof AuthedProposalsIdVersionRouteRouteWithChildren
  '/_authed/proposals/new/blank': typeof AuthedProposalsNewBlankRoute
  '/review/$id/$version/': typeof ReviewIdVersionIndexRoute
  '/_authed/proposals/$id/$version/products': typeof AuthedProposalsIdVersionProductsRoute
  '/_authed/proposals/$id/$version/settings': typeof AuthedProposalsIdVersionSettingsRoute
  '/_authed/proposals/$id/$version/workplan': typeof AuthedProposalsIdVersionWorkplanRoute
  '/_authed/proposals/$id/$version/': typeof AuthedProposalsIdVersionIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/auth/auth-code-error'
    | '/proposals'
    | '/proposals/$id/$version'
    | '/proposals/new/blank'
    | '/review/$id/$version'
    | '/proposals/$id/$version/products'
    | '/proposals/$id/$version/settings'
    | '/proposals/$id/$version/workplan'
    | '/proposals/$id/$version/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/auth/auth-code-error'
    | '/proposals'
    | '/proposals/new/blank'
    | '/review/$id/$version'
    | '/proposals/$id/$version/products'
    | '/proposals/$id/$version/settings'
    | '/proposals/$id/$version/workplan'
    | '/proposals/$id/$version'
  id:
    | '__root__'
    | '/_authed'
    | '/login'
    | '/auth/auth-code-error'
    | '/_authed/proposals/'
    | '/_authed/proposals/$id/$version'
    | '/_authed/proposals/new/blank'
    | '/review/$id/$version/'
    | '/_authed/proposals/$id/$version/products'
    | '/_authed/proposals/$id/$version/settings'
    | '/_authed/proposals/$id/$version/workplan'
    | '/_authed/proposals/$id/$version/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  AuthAuthCodeErrorRoute: typeof AuthAuthCodeErrorRoute
  ReviewIdVersionIndexRoute: typeof ReviewIdVersionIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  AuthAuthCodeErrorRoute: AuthAuthCodeErrorRoute,
  ReviewIdVersionIndexRoute: ReviewIdVersionIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/login",
        "/auth/auth-code-error",
        "/review/$id/$version/"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/proposals/",
        "/_authed/proposals/$id/$version",
        "/_authed/proposals/new/blank"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/auth/auth-code-error": {
      "filePath": "auth/auth-code-error.tsx"
    },
    "/_authed/proposals/": {
      "filePath": "_authed/proposals/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/proposals/$id/$version": {
      "filePath": "_authed/proposals/$id/$version/route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/proposals/$id/$version/products",
        "/_authed/proposals/$id/$version/settings",
        "/_authed/proposals/$id/$version/workplan",
        "/_authed/proposals/$id/$version/"
      ]
    },
    "/_authed/proposals/new/blank": {
      "filePath": "_authed/proposals/new/blank.tsx",
      "parent": "/_authed"
    },
    "/review/$id/$version/": {
      "filePath": "review/$id/$version/index.tsx"
    },
    "/_authed/proposals/$id/$version/products": {
      "filePath": "_authed/proposals/$id/$version/products.tsx",
      "parent": "/_authed/proposals/$id/$version"
    },
    "/_authed/proposals/$id/$version/settings": {
      "filePath": "_authed/proposals/$id/$version/settings.tsx",
      "parent": "/_authed/proposals/$id/$version"
    },
    "/_authed/proposals/$id/$version/workplan": {
      "filePath": "_authed/proposals/$id/$version/workplan.tsx",
      "parent": "/_authed/proposals/$id/$version"
    },
    "/_authed/proposals/$id/$version/": {
      "filePath": "_authed/proposals/$id/$version/index.tsx",
      "parent": "/_authed/proposals/$id/$version"
    }
  }
}
ROUTE_MANIFEST_END */
