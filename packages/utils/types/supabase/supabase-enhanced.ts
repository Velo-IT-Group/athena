/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./index";

export const publicAuthTypeSchema = z.union([
  z.literal("OAuth 2.0"),
  z.literal("Basic"),
  z.literal("Bearer Token"),
]);

export const publicIntegrationTypeSchema = z.union([
  z.literal("reseller"),
  z.literal("distribution"),
  z.literal("email"),
]);

export const publicStatusSchema = z.union([
  z.literal("building"),
  z.literal("inProgress"),
  z.literal("signed"),
  z.literal("canceled"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicAssetsRowSchema = z.object({
  asset_tag: z.string().nullable(),
  created_at: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  status: z.string(),
  type_id: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const publicAssetsInsertSchema = z.object({
  asset_tag: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  status: z.string(),
  type_id: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicAssetsUpdateSchema = z.object({
  asset_tag: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  status: z.string().optional(),
  type_id: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicIntegrationsRowSchema = z.object({
  auth_type: publicAuthTypeSchema.nullable(),
  id: z.string(),
  logo: z.string().nullable(),
  name: z.string(),
  type: publicIntegrationTypeSchema.nullable(),
});

export const publicIntegrationsInsertSchema = z.object({
  auth_type: publicAuthTypeSchema.optional().nullable(),
  id: z.string().optional(),
  logo: z.string().optional().nullable(),
  name: z.string(),
  type: publicIntegrationTypeSchema.optional().nullable(),
});

export const publicIntegrationsUpdateSchema = z.object({
  auth_type: publicAuthTypeSchema.optional().nullable(),
  id: z.string().optional(),
  logo: z.string().optional().nullable(),
  name: z.string().optional(),
  type: publicIntegrationTypeSchema.optional().nullable(),
});

export const publicNotificationsRowSchema = z.object({
  created_at: z.string(),
  from: z.string().nullable(),
  id: z.string(),
  is_read: z.boolean(),
  read_at: z.string().nullable(),
  resource_name: z.string().nullable(),
  resource_params: jsonSchema.nullable(),
  resource_path: z.string(),
  type: z.string(),
  user_id: z.string(),
});

export const publicNotificationsInsertSchema = z.object({
  created_at: z.string().optional(),
  from: z.string().optional().nullable(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  read_at: z.string().optional().nullable(),
  resource_name: z.string().optional().nullable(),
  resource_params: jsonSchema.optional().nullable(),
  resource_path: z.string(),
  type: z.string(),
  user_id: z.string().optional(),
});

export const publicNotificationsUpdateSchema = z.object({
  created_at: z.string().optional(),
  from: z.string().optional().nullable(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  read_at: z.string().optional().nullable(),
  resource_name: z.string().optional().nullable(),
  resource_params: jsonSchema.optional().nullable(),
  resource_path: z.string().optional(),
  type: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicNotificationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("notifications_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicOrganizationIntegrationsRowSchema = z.object({
  client_id: z.string().nullable(),
  integration: z.string(),
  organization: z.string(),
  secret_key: z.string().nullable(),
});

export const publicOrganizationIntegrationsInsertSchema = z.object({
  client_id: z.string().optional().nullable(),
  integration: z.string().optional(),
  organization: z.string().optional(),
  secret_key: z.string().optional().nullable(),
});

export const publicOrganizationIntegrationsUpdateSchema = z.object({
  client_id: z.string().optional().nullable(),
  integration: z.string().optional(),
  organization: z.string().optional(),
  secret_key: z.string().optional().nullable(),
});

export const publicOrganizationIntegrationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("organization_integrations_integration_fkey"),
    columns: z.tuple([z.literal("integration")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("integrations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("organization_integrations_organization_fkey"),
    columns: z.tuple([z.literal("organization")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicOrganizationsRowSchema = z.object({
  default_assumptions: z.string().nullable(),
  default_template: z.number().nullable(),
  id: z.string(),
  labor_rate: z.number(),
  name: z.string(),
  slug: z.string().nullable(),
  visibility_settings: jsonSchema,
});

export const publicOrganizationsInsertSchema = z.object({
  default_assumptions: z.string().optional().nullable(),
  default_template: z.number().optional().nullable(),
  id: z.string().optional(),
  labor_rate: z.number(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  visibility_settings: jsonSchema.optional(),
});

export const publicOrganizationsUpdateSchema = z.object({
  default_assumptions: z.string().optional().nullable(),
  default_template: z.number().optional().nullable(),
  id: z.string().optional(),
  labor_rate: z.number().optional(),
  name: z.string().optional(),
  slug: z.string().optional().nullable(),
  visibility_settings: jsonSchema.optional(),
});

export const publicPhasesRowSchema = z.object({
  description: z.string(),
  hours: z.number(),
  id: z.string(),
  order: z.number(),
  reference_id: z.number().nullable(),
  version: z.string(),
  visible: z.boolean().nullable(),
});

export const publicPhasesInsertSchema = z.object({
  description: z.string(),
  hours: z.number().optional(),
  id: z.string().optional(),
  order: z.number().optional(),
  reference_id: z.number().optional().nullable(),
  version: z.string(),
  visible: z.boolean().optional().nullable(),
});

export const publicPhasesUpdateSchema = z.object({
  description: z.string().optional(),
  hours: z.number().optional(),
  id: z.string().optional(),
  order: z.number().optional(),
  reference_id: z.number().optional().nullable(),
  version: z.string().optional(),
  visible: z.boolean().optional().nullable(),
});

export const publicPhasesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_phases_version_fkey"),
    columns: z.tuple([z.literal("version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposal_totals"),
    referencedColumns: z.tuple([z.literal("version_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_phases_version_fkey"),
    columns: z.tuple([z.literal("version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("versions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPinnedItemsRowSchema = z.object({
  created_at: z.string(),
  helper_name: z.string(),
  id: z.string(),
  identifier: z.string(),
  params: jsonSchema,
  path: z.string(),
  record_type: z.string(),
  user_id: z.string(),
});

export const publicPinnedItemsInsertSchema = z.object({
  created_at: z.string().optional(),
  helper_name: z.string(),
  id: z.string().optional(),
  identifier: z.string(),
  params: jsonSchema,
  path: z.string(),
  record_type: z.string(),
  user_id: z.string().optional(),
});

export const publicPinnedItemsUpdateSchema = z.object({
  created_at: z.string().optional(),
  helper_name: z.string().optional(),
  id: z.string().optional(),
  identifier: z.string().optional(),
  params: jsonSchema.optional(),
  path: z.string().optional(),
  record_type: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicProductsRowSchema = z.object({
  additional_overrides: jsonSchema.nullable(),
  calculated_cost: z.number().nullable(),
  calculated_price: z.number().nullable(),
  catalog_item: z.number().nullable(),
  category: z.string().nullable(),
  cost: z.number().nullable(),
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  extended_cost: z.number().nullable(),
  extended_price: z.number().nullable(),
  id: z.number().nullable(),
  identifier: z.string().nullable(),
  manufacturer_part_number: z.string().nullable(),
  order: z.number(),
  parent: z.string().nullable(),
  parent_catalog_item: z.number().nullable(),
  price: z.number().nullable(),
  product_class: z.string().nullable(),
  quantity: z.number(),
  recurring_bill_cycle: z.number().nullable(),
  recurring_cost: z.number().nullable(),
  recurring_cycle_type: z.string().nullable(),
  recurring_flag: z.boolean().nullable(),
  section: z.string().nullable(),
  sequence_number: z.number().nullable(),
  taxable_flag: z.boolean().nullable(),
  type: z.string().nullable(),
  unique_id: z.string(),
  unit_of_measure: z.string().nullable(),
  vendor: z.string().nullable(),
  version: z.string(),
});

export const publicProductsInsertSchema = z.object({
  additional_overrides: jsonSchema.optional().nullable(),
  calculated_cost: z.number().optional().nullable(),
  calculated_price: z.number().optional().nullable(),
  catalog_item: z.number().optional().nullable(),
  category: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  extended_cost: z.number().optional().nullable(),
  extended_price: z.number().optional().nullable(),
  id: z.number().optional().nullable(),
  identifier: z.string().optional().nullable(),
  manufacturer_part_number: z.string().optional().nullable(),
  order: z.number().optional(),
  parent: z.string().optional().nullable(),
  parent_catalog_item: z.number().optional().nullable(),
  price: z.number().optional().nullable(),
  product_class: z.string().optional().nullable(),
  quantity: z.number().optional(),
  recurring_bill_cycle: z.number().optional().nullable(),
  recurring_cost: z.number().optional().nullable(),
  recurring_cycle_type: z.string().optional().nullable(),
  recurring_flag: z.boolean().optional().nullable(),
  section: z.string().optional().nullable(),
  sequence_number: z.number().optional().nullable(),
  taxable_flag: z.boolean().optional().nullable(),
  type: z.string().optional().nullable(),
  unique_id: z.string().optional(),
  unit_of_measure: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  version: z.string(),
});

export const publicProductsUpdateSchema = z.object({
  additional_overrides: jsonSchema.optional().nullable(),
  calculated_cost: z.number().optional().nullable(),
  calculated_price: z.number().optional().nullable(),
  catalog_item: z.number().optional().nullable(),
  category: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  extended_cost: z.number().optional().nullable(),
  extended_price: z.number().optional().nullable(),
  id: z.number().optional().nullable(),
  identifier: z.string().optional().nullable(),
  manufacturer_part_number: z.string().optional().nullable(),
  order: z.number().optional(),
  parent: z.string().optional().nullable(),
  parent_catalog_item: z.number().optional().nullable(),
  price: z.number().optional().nullable(),
  product_class: z.string().optional().nullable(),
  quantity: z.number().optional(),
  recurring_bill_cycle: z.number().optional().nullable(),
  recurring_cost: z.number().optional().nullable(),
  recurring_cycle_type: z.string().optional().nullable(),
  recurring_flag: z.boolean().optional().nullable(),
  section: z.string().optional().nullable(),
  sequence_number: z.number().optional().nullable(),
  taxable_flag: z.boolean().optional().nullable(),
  type: z.string().optional().nullable(),
  unique_id: z.string().optional(),
  unit_of_measure: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  version: z.string().optional(),
});

export const publicProductsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_products_2_parent_fkey"),
    columns: z.tuple([z.literal("parent")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("products"),
    referencedColumns: z.tuple([z.literal("unique_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_products_section_fkey"),
    columns: z.tuple([z.literal("section")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("sections"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_products_version_fkey"),
    columns: z.tuple([z.literal("version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposal_totals"),
    referencedColumns: z.tuple([z.literal("version_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_products_version_fkey"),
    columns: z.tuple([z.literal("version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("versions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProfileKeysRowSchema = z.object({
  key: z.string(),
  user_id: z.string(),
});

export const publicProfileKeysInsertSchema = z.object({
  key: z.string(),
  user_id: z.string(),
});

export const publicProfileKeysUpdateSchema = z.object({
  key: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicProfileKeysRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("profile_keys_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProfilesRowSchema = z.object({
  contact_id: z.number().nullable(),
  first_name: z.string().nullable(),
  id: z.string(),
  image_url: z.string().nullable(),
  last_name: z.string().nullable(),
  organization: z.string().nullable(),
  system_member_id: z.number().nullable(),
  updated_at: z.string().nullable(),
  username: z.string().nullable(),
  worker_sid: z.string().nullable(),
});

export const publicProfilesInsertSchema = z.object({
  contact_id: z.number().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string(),
  image_url: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  system_member_id: z.number().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  worker_sid: z.string().optional().nullable(),
});

export const publicProfilesUpdateSchema = z.object({
  contact_id: z.number().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  organization: z.string().optional().nullable(),
  system_member_id: z.number().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  worker_sid: z.string().optional().nullable(),
});

export const publicProfilesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("profiles_organization_fkey"),
    columns: z.tuple([z.literal("organization")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProposalFollowersRowSchema = z.object({
  proposal_id: z.string(),
  user_id: z.string(),
});

export const publicProposalFollowersInsertSchema = z.object({
  proposal_id: z.string(),
  user_id: z.string(),
});

export const publicProposalFollowersUpdateSchema = z.object({
  proposal_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicProposalFollowersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("proposal_followers_proposal_id_fkey"),
    columns: z.tuple([z.literal("proposal_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposal_totals"),
    referencedColumns: z.tuple([z.literal("proposal_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("proposal_followers_proposal_id_fkey"),
    columns: z.tuple([z.literal("proposal_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposals"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("proposal_followers_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProposalSettingsRowSchema = z.object({
  assumptions: z.string().nullable(),
  description: z.string().nullable(),
  proposal: z.string(),
  version: z.string(),
});

export const publicProposalSettingsInsertSchema = z.object({
  assumptions: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  proposal: z.string(),
  version: z.string(),
});

export const publicProposalSettingsUpdateSchema = z.object({
  assumptions: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  proposal: z.string().optional(),
  version: z.string().optional(),
});

export const publicProposalSettingsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("settings_proposal_fkey"),
    columns: z.tuple([z.literal("proposal")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposal_totals"),
    referencedColumns: z.tuple([z.literal("proposal_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("settings_proposal_fkey"),
    columns: z.tuple([z.literal("proposal")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposals"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("settings_version_fkey"),
    columns: z.tuple([z.literal("version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposal_totals"),
    referencedColumns: z.tuple([z.literal("version_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("settings_version_fkey"),
    columns: z.tuple([z.literal("version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("versions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProposalsRowSchema = z.object({
  approval_info: jsonSchema.nullable(),
  catalog_items: z.array(z.number()).nullable(),
  company: jsonSchema.nullable(),
  company_id: z.number().nullable(),
  company_name: z.string().nullable(),
  contact: jsonSchema.nullable(),
  contact_id: z.number().nullable(),
  contact_name: z.string().nullable(),
  created_at: z.string(),
  created_by: z.string().nullable(),
  date_approved: z.string().nullable(),
  embedding: z.string().nullable(),
  expiration_date: z.string().nullable(),
  id: z.string(),
  is_conversion_completed: z.boolean(),
  is_getting_converted: z.boolean(),
  labor_hours: z.number(),
  labor_rate: z.number(),
  name: z.string(),
  opportunity_id: z.number().nullable(),
  organization: z.string().nullable(),
  project_id: z.number().nullable(),
  service_ticket: z.number().nullable(),
  status: publicStatusSchema,
  templates_used: z.array(z.number()).nullable(),
  updated_at: z.string(),
  working_version: z.string().nullable(),
});

export const publicProposalsInsertSchema = z.object({
  approval_info: jsonSchema.optional().nullable(),
  catalog_items: z.array(z.number()).optional().nullable(),
  company: jsonSchema.optional().nullable(),
  company_id: z.number().optional().nullable(),
  company_name: z.string().optional().nullable(),
  contact: jsonSchema.optional().nullable(),
  contact_id: z.number().optional().nullable(),
  contact_name: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  date_approved: z.string().optional().nullable(),
  embedding: z.string().optional().nullable(),
  expiration_date: z.string().optional().nullable(),
  id: z.string().optional(),
  is_conversion_completed: z.boolean().optional(),
  is_getting_converted: z.boolean().optional(),
  labor_hours: z.number().optional(),
  labor_rate: z.number().optional(),
  name: z.string(),
  opportunity_id: z.number().optional().nullable(),
  organization: z.string().optional().nullable(),
  project_id: z.number().optional().nullable(),
  service_ticket: z.number().optional().nullable(),
  status: publicStatusSchema.optional(),
  templates_used: z.array(z.number()).optional().nullable(),
  updated_at: z.string().optional(),
  working_version: z.string().optional().nullable(),
});

export const publicProposalsUpdateSchema = z.object({
  approval_info: jsonSchema.optional().nullable(),
  catalog_items: z.array(z.number()).optional().nullable(),
  company: jsonSchema.optional().nullable(),
  company_id: z.number().optional().nullable(),
  company_name: z.string().optional().nullable(),
  contact: jsonSchema.optional().nullable(),
  contact_id: z.number().optional().nullable(),
  contact_name: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  date_approved: z.string().optional().nullable(),
  embedding: z.string().optional().nullable(),
  expiration_date: z.string().optional().nullable(),
  id: z.string().optional(),
  is_conversion_completed: z.boolean().optional(),
  is_getting_converted: z.boolean().optional(),
  labor_hours: z.number().optional(),
  labor_rate: z.number().optional(),
  name: z.string().optional(),
  opportunity_id: z.number().optional().nullable(),
  organization: z.string().optional().nullable(),
  project_id: z.number().optional().nullable(),
  service_ticket: z.number().optional().nullable(),
  status: publicStatusSchema.optional(),
  templates_used: z.array(z.number()).optional().nullable(),
  updated_at: z.string().optional(),
  working_version: z.string().optional().nullable(),
});

export const publicProposalsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("proposals_organization_fkey"),
    columns: z.tuple([z.literal("organization")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_proposals_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_proposals_working_version_fkey"),
    columns: z.tuple([z.literal("working_version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposal_totals"),
    referencedColumns: z.tuple([z.literal("version_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_proposals_working_version_fkey"),
    columns: z.tuple([z.literal("working_version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("versions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicSectionsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  name: z.string(),
  order: z.number(),
  version: z.string(),
});

export const publicSectionsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string(),
  order: z.number().optional(),
  version: z.string(),
});

export const publicSectionsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  order: z.number().optional(),
  version: z.string().optional(),
});

export const publicSectionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_sections_version_fkey"),
    columns: z.tuple([z.literal("version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposal_totals"),
    referencedColumns: z.tuple([z.literal("version_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_sections_version_fkey"),
    columns: z.tuple([z.literal("version")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("versions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTasksRowSchema = z.object({
  budget_hours: z.number().nullable(),
  created_at: z.string(),
  id: z.string(),
  notes: z.string(),
  order: z.number(),
  priority: z.number(),
  reference_id: z.number().nullable(),
  summary: z.string(),
  ticket: z.string(),
  visibile: z.boolean(),
  visible: z.boolean().nullable(),
});

export const publicTasksInsertSchema = z.object({
  budget_hours: z.number().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  notes: z.string(),
  order: z.number().optional(),
  priority: z.number(),
  reference_id: z.number().optional().nullable(),
  summary: z.string(),
  ticket: z.string(),
  visibile: z.boolean().optional(),
  visible: z.boolean().optional().nullable(),
});

export const publicTasksUpdateSchema = z.object({
  budget_hours: z.number().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  notes: z.string().optional(),
  order: z.number().optional(),
  priority: z.number().optional(),
  reference_id: z.number().optional().nullable(),
  summary: z.string().optional(),
  ticket: z.string().optional(),
  visibile: z.boolean().optional(),
  visible: z.boolean().optional().nullable(),
});

export const publicTasksRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tasks_ticket_fkey"),
    columns: z.tuple([z.literal("ticket")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tickets"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTicketsRowSchema = z.object({
  budget_hours: z.number(),
  created_at: z.string(),
  id: z.string(),
  order: z.number(),
  phase: z.string(),
  reference_id: z.number().nullable(),
  summary: z.string(),
  visible: z.boolean(),
});

export const publicTicketsInsertSchema = z.object({
  budget_hours: z.number().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  order: z.number(),
  phase: z.string(),
  reference_id: z.number().optional().nullable(),
  summary: z.string(),
  visible: z.boolean().optional(),
});

export const publicTicketsUpdateSchema = z.object({
  budget_hours: z.number().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  order: z.number().optional(),
  phase: z.string().optional(),
  reference_id: z.number().optional().nullable(),
  summary: z.string().optional(),
  visible: z.boolean().optional(),
});

export const publicTicketsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_tickets_phase_fkey"),
    columns: z.tuple([z.literal("phase")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("phases"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicVersionsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  number: z.number().nullable(),
  proposal: z.string(),
});

export const publicVersionsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  number: z.number().optional().nullable(),
  proposal: z.string(),
});

export const publicVersionsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  number: z.number().optional().nullable(),
  proposal: z.string().optional(),
});

export const publicVersionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_versions_proposal_fkey"),
    columns: z.tuple([z.literal("proposal")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposal_totals"),
    referencedColumns: z.tuple([z.literal("proposal_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_versions_proposal_fkey"),
    columns: z.tuple([z.literal("proposal")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("proposals"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicCalculateTotalsRowSchema = z.object({
  labor_total: z.number().nullable(),
  total_cost: z.number().nullable(),
  total_price: z.number().nullable(),
  total_product: z.number().nullable(),
  total_recurring: z.number().nullable(),
});

export const publicProposalTotalsRowSchema = z.object({
  labor_cost: z.number().nullable(),
  labor_rate: z.number().nullable(),
  non_recurring_product_cost: z.number().nullable(),
  non_recurring_product_total: z.number().nullable(),
  proposal_id: z.string().nullable(),
  recurring_cost: z.number().nullable(),
  recurring_total: z.number().nullable(),
  total_hours: z.number().nullable(),
  total_price: z.number().nullable(),
  version_id: z.string().nullable(),
  version_number: z.number().nullable(),
});

export const publicConvertToManageArgsSchema = z.object({
  proposal_id: z.string(),
});

export const publicConvertToManageReturnsSchema = z.undefined();

export const publicCopyVersionDataArgsSchema = z.object({
  old_version: z.string(),
  new_version: z.string(),
});

export const publicCopyVersionDataReturnsSchema = z.undefined();

export const publicCreateManageOpportunityArgsSchema = z.object({
  proposal_id: z.string(),
});

export const publicCreateManageOpportunityReturnsSchema = z.string();

export const publicCreateManageProjectArgsSchema = z.object({
  opportunity_id: z.number(),
});

export const publicCreateManageProjectReturnsSchema = z.string();

export const publicCreateNewPhaseArgsSchema = z.object({
  old_phase_id: z.string(),
  new_version_id: z.string().optional(),
});

export const publicCreateNewPhaseReturnsSchema = z.string();

export const publicCreateNewProductArgsSchema = z.object({
  old_product_id: z.string(),
  new_version: z.string(),
  new_section: z.string().optional(),
});

export const publicCreateNewProductReturnsSchema = z.string();

export const publicCreateNewTaskArgsSchema = z.object({
  old_task_id: z.string(),
  new_ticket_id: z.string(),
});

export const publicCreateNewTaskReturnsSchema = z.string();

export const publicCreateNewTicketArgsSchema = z.object({
  old_ticket_id: z.string(),
  new_phase_id: z.string(),
});

export const publicCreateNewTicketReturnsSchema = z.string();

export const publicCreateOpportunityProductsArgsSchema = z.union([
  z.object({
    opportunity_id: z.number(),
  }),
  z.object({
    opportunity_id: z.number(),
    version_id: z.string(),
  }),
]);

export const publicCreateOpportunityProductsReturnsSchema = jsonSchema;

export const publicCreatePhaseTicketArgsSchema = z.object({
  ticket_id: z.string(),
  phase_id: z.number(),
});

export const publicCreatePhaseTicketReturnsSchema = z.string();

export const publicCreateProjectPhaseArgsSchema = z.object({
  phase_id: z.string(),
  project_id: z.number(),
});

export const publicCreateProjectPhaseReturnsSchema = z.string();

export const publicCreateTicketTaskArgsSchema = z.object({
  task_id: z.string(),
  ticket_id: z.number(),
});

export const publicCreateTicketTaskReturnsSchema = z.string();

export const publicDuplicatePhasesArgsSchema = z.object({
  old_version: z.string(),
  new_version: z.string(),
});

export const publicDuplicatePhasesReturnsSchema = z.array(z.string());

export const publicDuplicateProductsArgsSchema = z.object({
  original_id: z.string(),
  new_id: z.string(),
});

export const publicDuplicateProductsReturnsSchema = z.undefined();

export const publicDuplicateTasksArgsSchema = z.object({
  original_id: z.string(),
  new_id: z.string(),
});

export const publicDuplicateTasksReturnsSchema = z.undefined();

export const publicDuplicateTicketsArgsSchema = z.object({
  original_id: z.string(),
  new_id: z.string(),
});

export const publicDuplicateTicketsReturnsSchema = z.undefined();

export const publicGetMemberArgsSchema = z.object({
  email: z.string(),
});

export const publicGetMemberReturnsSchema = z.number();

export const publicGetOpportunityProductsArgsSchema = z.object({
  opportunity_id: z.number(),
});

export const publicGetOpportunityProductsReturnsSchema = z.array(
  z.object({
    id: z.number(),
    catalogitem: z.number(),
  }),
);

export const publicGetOrganizationFromPhaseArgsSchema = z.object({
  phase_id: z.string(),
});

export const publicGetOrganizationFromPhaseReturnsSchema = z.array(
  z.object({
    id: z.string(),
    name: z.string(),
    labor_rate: z.number(),
    slug: z.string(),
    default_template: z.number(),
    visibility_settings: jsonSchema,
  }),
);

export const publicIsOrganizationMemberArgsSchema = z.object({
  organization_id: z.string(),
  user_id: z.string(),
});

export const publicIsOrganizationMemberReturnsSchema = z.boolean();

export const publicIsProposalSharedArgsSchema = z.object({
  proposal_id: z.string(),
  user_id: z.string(),
});

export const publicIsProposalSharedReturnsSchema = z.boolean();

export const publicJsonbDiffValArgsSchema = z.object({
  val1: jsonSchema,
  val2: jsonSchema,
});

export const publicJsonbDiffValReturnsSchema = jsonSchema;

export const publicPhaseLoopArgsSchema = z.object({});

export const publicPhaseLoopReturnsSchema = z.undefined();

export const publicReadSecretArgsSchema = z.object({
  secret_name: z.string(),
});

export const publicReadSecretReturnsSchema = z.string();

export const publicSlugifyArgsSchema = z.object({
  value: z.string(),
});

export const publicSlugifyReturnsSchema = z.string();

export const publicUnaccentArgsSchema = z.object({
  "": z.string(),
});

export const publicUnaccentReturnsSchema = z.string();

export const publicUnaccentInitArgsSchema = z.object({
  "": z.unknown(),
});

export const publicUnaccentInitReturnsSchema = z.unknown();

export const publicUpdateManageProductArgsSchema = z.union([
  z.object({
    o_prod_id: z.number(),
    price: z.number(),
    cost: z.number(),
  }),
  z.object({
    o_prod_id: z.number(),
    price: z.number(),
    cost: z.number(),
    quantity: z.number(),
  }),
]);

export const publicUpdateManageProductReturnsSchema = z.undefined();

export const reportingConversationsRowSchema = z.object({
  abandon_time: z.number().nullable(),
  abandoned: z.string().nullable(),
  abandoned_phase: z.string().nullable(),
  agent: z.string().nullable(),
  communication_channel: z.string().nullable(),
  company_id: z.number().nullable(),
  contact_id: z.number().nullable(),
  date: z.string(),
  direction: z.string().nullable(),
  hold_time: z.number().nullable(),
  id: z.string(),
  in_business_hours: z.boolean().nullable(),
  outcome: z.string().nullable(),
  phone_number: z.string().nullable(),
  queue: z.string().nullable(),
  queue_time: z.number().nullable(),
  talk_time: z.number().nullable(),
  workflow: z.string().nullable(),
});

export const reportingConversationsInsertSchema = z.object({
  abandon_time: z.number().optional().nullable(),
  abandoned: z.string().optional().nullable(),
  abandoned_phase: z.string().optional().nullable(),
  agent: z.string().optional().nullable(),
  communication_channel: z.string().optional().nullable(),
  company_id: z.number().optional().nullable(),
  contact_id: z.number().optional().nullable(),
  date: z.string().optional(),
  direction: z.string().optional().nullable(),
  hold_time: z.number().optional().nullable(),
  id: z.string(),
  in_business_hours: z.boolean().optional().nullable(),
  outcome: z.string().optional().nullable(),
  phone_number: z.string().optional().nullable(),
  queue: z.string().optional().nullable(),
  queue_time: z.number().optional().nullable(),
  talk_time: z.number().optional().nullable(),
  workflow: z.string().optional().nullable(),
});

export const reportingConversationsUpdateSchema = z.object({
  abandon_time: z.number().optional().nullable(),
  abandoned: z.string().optional().nullable(),
  abandoned_phase: z.string().optional().nullable(),
  agent: z.string().optional().nullable(),
  communication_channel: z.string().optional().nullable(),
  company_id: z.number().optional().nullable(),
  contact_id: z.number().optional().nullable(),
  date: z.string().optional(),
  direction: z.string().optional().nullable(),
  hold_time: z.number().optional().nullable(),
  id: z.string().optional(),
  in_business_hours: z.boolean().optional().nullable(),
  outcome: z.string().optional().nullable(),
  phone_number: z.string().optional().nullable(),
  queue: z.string().optional().nullable(),
  queue_time: z.number().optional().nullable(),
  talk_time: z.number().optional().nullable(),
  workflow: z.string().optional().nullable(),
});

export const reportingDashboardsRowSchema = z.object({
  asset_id: z.string().nullable(),
  configuration: jsonSchema,
  created_at: z.string().nullable(),
  id: z.string(),
  layout_format: jsonSchema,
  update_at: z.string().nullable(),
  updated_by: z.string().nullable(),
  view_type: z.string(),
});

export const reportingDashboardsInsertSchema = z.object({
  asset_id: z.string().optional().nullable(),
  configuration: jsonSchema,
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  layout_format: jsonSchema,
  update_at: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  view_type: z.string(),
});

export const reportingDashboardsUpdateSchema = z.object({
  asset_id: z.string().optional().nullable(),
  configuration: jsonSchema.optional(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  layout_format: jsonSchema.optional(),
  update_at: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  view_type: z.string().optional(),
});

export const reportingEngagementReservationsRowSchema = z.object({
  created_at: z.string(),
  enagement_id: z.string(),
  id: z.string(),
  reservation_status: z.string(),
  worker_sid: z.string(),
});

export const reportingEngagementReservationsInsertSchema = z.object({
  created_at: z.string().optional(),
  enagement_id: z.string(),
  id: z.string(),
  reservation_status: z.string(),
  worker_sid: z.string(),
});

export const reportingEngagementReservationsUpdateSchema = z.object({
  created_at: z.string().optional(),
  enagement_id: z.string().optional(),
  id: z.string().optional(),
  reservation_status: z.string().optional(),
  worker_sid: z.string().optional(),
});

export const reportingEngagementReservationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("engagement_reservations_enagement_id_fkey"),
    columns: z.tuple([z.literal("enagement_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("engagements"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const reportingEngagementsRowSchema = z.object({
  attributes: jsonSchema.nullable(),
  channel: z.string(),
  company: jsonSchema.nullable(),
  contact: jsonSchema.nullable(),
  created_at: z.string(),
  follow_up_engagement_id: z.string().nullable(),
  id: z.string(),
  is_canceled: z.boolean().nullable(),
  is_inbound: z.boolean(),
  is_voicemail: z.boolean().nullable(),
  recording_url: z.string().nullable(),
  transcription_sid: z.string().nullable(),
  workspace_sid: z.string().nullable(),
});

export const reportingEngagementsInsertSchema = z.object({
  attributes: jsonSchema.optional().nullable(),
  channel: z.string().optional(),
  company: jsonSchema.optional().nullable(),
  contact: jsonSchema.optional().nullable(),
  created_at: z.string().optional(),
  follow_up_engagement_id: z.string().optional().nullable(),
  id: z.string(),
  is_canceled: z.boolean().optional().nullable(),
  is_inbound: z.boolean().optional(),
  is_voicemail: z.boolean().optional().nullable(),
  recording_url: z.string().optional().nullable(),
  transcription_sid: z.string().optional().nullable(),
  workspace_sid: z.string().optional().nullable(),
});

export const reportingEngagementsUpdateSchema = z.object({
  attributes: jsonSchema.optional().nullable(),
  channel: z.string().optional(),
  company: jsonSchema.optional().nullable(),
  contact: jsonSchema.optional().nullable(),
  created_at: z.string().optional(),
  follow_up_engagement_id: z.string().optional().nullable(),
  id: z.string().optional(),
  is_canceled: z.boolean().optional().nullable(),
  is_inbound: z.boolean().optional(),
  is_voicemail: z.boolean().optional().nullable(),
  recording_url: z.string().optional().nullable(),
  transcription_sid: z.string().optional().nullable(),
  workspace_sid: z.string().optional().nullable(),
});

export const reportingEngagementsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("engagements_follow_up_engagement_id_fkey"),
    columns: z.tuple([z.literal("follow_up_engagement_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("engagements"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const reportingAbandonedConversationsByDayRowSchema = z.object({
  abandoned_count: z.number().nullable(),
  average_abandon_time: z.number().nullable(),
  conversation_date: z.string().nullable(),
});

export const reportingCallSummaryByPeriodRowSchema = z.object({
  call_date: z.string().nullable(),
  channel: z.string().nullable(),
  inbound_engagements: z.number().nullable(),
  outbound_engagements: z.number().nullable(),
  total_engagements: z.number().nullable(),
  voicemails: z.number().nullable(),
});

export const reportingCallsByAgentRowSchema = z.object({
  agent: z.string().nullable(),
  inbound_calls: z.number().nullable(),
  outbound_calls: z.number().nullable(),
});

export const reportingCallsByAgentByDayRowSchema = z.object({
  agent: z.string().nullable(),
  date: z.string().nullable(),
  inbound_calls: z.number().nullable(),
  outbound_calls: z.number().nullable(),
  total_conversations: z.number().nullable(),
  total_talk_time: z.number().nullable(),
});

export const reportingCallsSummaryByDayRowSchema = z.object({
  call_date: z.string().nullable(),
  inbound_conversations: z.number().nullable(),
  outbound_conversations: z.number().nullable(),
  total_calls: z.number().nullable(),
  total_talk_time: z.number().nullable(),
});

export const reportingConversationsByAgentByDayRowSchema = z.object({
  agent: z.string().nullable(),
  conversation_date: z.string().nullable(),
  inbound_conversations: z.number().nullable(),
  outbound_conversations: z.number().nullable(),
  total_conversations: z.number().nullable(),
  total_talk_time: z.number().nullable(),
});

export const reportingConversationsSummaryByDayRowSchema = z.object({
  conversation_date: z.string().nullable(),
  inbound_conversations: z.number().nullable(),
  outbound_conversations: z.number().nullable(),
  total_conversations: z.number().nullable(),
  voicemail_count: z.number().nullable(),
});

export const reportingHandleTimeByDayRowSchema = z.object({
  average_abandon_time: z.number().nullable(),
  average_handling_time: z.number().nullable(),
  average_queue_time: z.number().nullable(),
  conversation_date: z.string().nullable(),
});

export const reportingHandleTimeByDayTestRowSchema = z.object({
  average_abandon_time: z.number().nullable(),
  average_handling_time: z.number().nullable(),
  average_queue_time: z.number().nullable(),
  conversation_date: z.string().nullable(),
});

export const reportingVoicemailsByDayRowSchema = z.object({
  voicemail_count: z.number().nullable(),
  voicemail_date: z.string().nullable(),
});

export const reportingVoicemailsByMonthRowSchema = z.object({
  voicemail_count: z.number().nullable(),
  voicemail_month: z.string().nullable(),
});

export const reportingVoicemailsLeftByDayRowSchema = z.object({
  date: z.string().nullable(),
  voicemail_count: z.number().nullable(),
});

export const reportingSearchNumberArgsSchema = z.object({
  phone_number: z.string(),
});

export const reportingSearchNumberReturnsSchema = z.array(
  z.object({
    userid: z.number(),
    companyid: z.number(),
    name: z.string(),
    territoryname: z.string(),
  }),
);

export const userExperienceViewsRowSchema = z.object({
  created_at: z.string(),
  creator: z.string().nullable(),
  filters: jsonSchema,
  id: z.string(),
  name: z.string(),
});

export const userExperienceViewsInsertSchema = z.object({
  created_at: z.string().optional(),
  creator: z.string().optional().nullable(),
  filters: jsonSchema,
  id: z.string().optional(),
  name: z.string(),
});

export const userExperienceViewsUpdateSchema = z.object({
  created_at: z.string().optional(),
  creator: z.string().optional().nullable(),
  filters: jsonSchema.optional(),
  id: z.string().optional(),
  name: z.string().optional(),
});

export const taskrouterBlacklistedPhoneNumbersRowSchema = z.object({
  number: z.string(),
  organization_id: z.string(),
});

export const taskrouterBlacklistedPhoneNumbersInsertSchema = z.object({
  number: z.string(),
  organization_id: z.string(),
});

export const taskrouterBlacklistedPhoneNumbersUpdateSchema = z.object({
  number: z.string().optional(),
  organization_id: z.string().optional(),
});

export const taskrouterTasksRowSchema = z.object({
  created_at: z.string(),
  reservation_sid: z.string(),
  task_sid: z.string(),
});

export const taskrouterTasksInsertSchema = z.object({
  created_at: z.string().optional(),
  reservation_sid: z.string(),
  task_sid: z.string(),
});

export const taskrouterTasksUpdateSchema = z.object({
  created_at: z.string().optional(),
  reservation_sid: z.string().optional(),
  task_sid: z.string().optional(),
});

export const systemAnnotationTagEntityRowSchema = z.object({
  createdAt: z.string(),
  id: z.string(),
  name: z.string(),
  updatedAt: z.string(),
});

export const systemAnnotationTagEntityInsertSchema = z.object({
  createdAt: z.string().optional(),
  id: z.string(),
  name: z.string(),
  updatedAt: z.string().optional(),
});

export const systemAnnotationTagEntityUpdateSchema = z.object({
  createdAt: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const systemAuthIdentityRowSchema = z.object({
  createdAt: z.string(),
  providerId: z.string(),
  providerType: z.string(),
  updatedAt: z.string(),
  userId: z.string().nullable(),
});

export const systemAuthIdentityInsertSchema = z.object({
  createdAt: z.string().optional(),
  providerId: z.string(),
  providerType: z.string(),
  updatedAt: z.string().optional(),
  userId: z.string().optional().nullable(),
});

export const systemAuthIdentityUpdateSchema = z.object({
  createdAt: z.string().optional(),
  providerId: z.string().optional(),
  providerType: z.string().optional(),
  updatedAt: z.string().optional(),
  userId: z.string().optional().nullable(),
});

export const systemAuthIdentityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("auth_identity_userId_fkey"),
    columns: z.tuple([z.literal("userId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemAuthProviderSyncHistoryRowSchema = z.object({
  created: z.number(),
  disabled: z.number(),
  endedAt: z.string(),
  error: z.string().nullable(),
  id: z.number(),
  providerType: z.string(),
  runMode: z.string(),
  scanned: z.number(),
  startedAt: z.string(),
  status: z.string(),
  updated: z.number(),
});

export const systemAuthProviderSyncHistoryInsertSchema = z.object({
  created: z.number(),
  disabled: z.number(),
  endedAt: z.string().optional(),
  error: z.string().optional().nullable(),
  id: z.number().optional(),
  providerType: z.string(),
  runMode: z.string(),
  scanned: z.number(),
  startedAt: z.string().optional(),
  status: z.string(),
  updated: z.number(),
});

export const systemAuthProviderSyncHistoryUpdateSchema = z.object({
  created: z.number().optional(),
  disabled: z.number().optional(),
  endedAt: z.string().optional(),
  error: z.string().optional().nullable(),
  id: z.number().optional(),
  providerType: z.string().optional(),
  runMode: z.string().optional(),
  scanned: z.number().optional(),
  startedAt: z.string().optional(),
  status: z.string().optional(),
  updated: z.number().optional(),
});

export const systemCredentialsEntityRowSchema = z.object({
  createdAt: z.string(),
  data: z.string(),
  id: z.string(),
  isManaged: z.boolean(),
  name: z.string(),
  type: z.string(),
  updatedAt: z.string(),
});

export const systemCredentialsEntityInsertSchema = z.object({
  createdAt: z.string().optional(),
  data: z.string(),
  id: z.string(),
  isManaged: z.boolean().optional(),
  name: z.string(),
  type: z.string(),
  updatedAt: z.string().optional(),
});

export const systemCredentialsEntityUpdateSchema = z.object({
  createdAt: z.string().optional(),
  data: z.string().optional(),
  id: z.string().optional(),
  isManaged: z.boolean().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const systemEventDestinationsRowSchema = z.object({
  createdAt: z.string(),
  destination: jsonSchema,
  id: z.string(),
  updatedAt: z.string(),
});

export const systemEventDestinationsInsertSchema = z.object({
  createdAt: z.string().optional(),
  destination: jsonSchema,
  id: z.string(),
  updatedAt: z.string().optional(),
});

export const systemEventDestinationsUpdateSchema = z.object({
  createdAt: z.string().optional(),
  destination: jsonSchema.optional(),
  id: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const systemExecutionAnnotationTagsRowSchema = z.object({
  annotationId: z.number(),
  tagId: z.string(),
});

export const systemExecutionAnnotationTagsInsertSchema = z.object({
  annotationId: z.number(),
  tagId: z.string(),
});

export const systemExecutionAnnotationTagsUpdateSchema = z.object({
  annotationId: z.number().optional(),
  tagId: z.string().optional(),
});

export const systemExecutionAnnotationTagsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_a3697779b366e131b2bbdae2976"),
    columns: z.tuple([z.literal("tagId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("annotation_tag_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("FK_c1519757391996eb06064f0e7c8"),
    columns: z.tuple([z.literal("annotationId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("execution_annotations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemExecutionAnnotationsRowSchema = z.object({
  createdAt: z.string(),
  executionId: z.number(),
  id: z.number(),
  note: z.string().nullable(),
  updatedAt: z.string(),
  vote: z.string().nullable(),
});

export const systemExecutionAnnotationsInsertSchema = z.object({
  createdAt: z.string().optional(),
  executionId: z.number(),
  id: z.number().optional(),
  note: z.string().optional().nullable(),
  updatedAt: z.string().optional(),
  vote: z.string().optional().nullable(),
});

export const systemExecutionAnnotationsUpdateSchema = z.object({
  createdAt: z.string().optional(),
  executionId: z.number().optional(),
  id: z.number().optional(),
  note: z.string().optional().nullable(),
  updatedAt: z.string().optional(),
  vote: z.string().optional().nullable(),
});

export const systemExecutionAnnotationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_97f863fa83c4786f19565084960"),
    columns: z.tuple([z.literal("executionId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("execution_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemExecutionDataRowSchema = z.object({
  data: z.string(),
  executionId: z.number(),
  workflowData: jsonSchema,
});

export const systemExecutionDataInsertSchema = z.object({
  data: z.string(),
  executionId: z.number(),
  workflowData: jsonSchema,
});

export const systemExecutionDataUpdateSchema = z.object({
  data: z.string().optional(),
  executionId: z.number().optional(),
  workflowData: jsonSchema.optional(),
});

export const systemExecutionDataRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("execution_data_fk"),
    columns: z.tuple([z.literal("executionId")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("execution_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemExecutionEntityRowSchema = z.object({
  createdAt: z.string(),
  deletedAt: z.string().nullable(),
  finished: z.boolean(),
  id: z.number(),
  mode: z.string(),
  retryOf: z.string().nullable(),
  retrySuccessId: z.string().nullable(),
  startedAt: z.string().nullable(),
  status: z.string(),
  stoppedAt: z.string().nullable(),
  waitTill: z.string().nullable(),
  workflowId: z.string(),
});

export const systemExecutionEntityInsertSchema = z.object({
  createdAt: z.string().optional(),
  deletedAt: z.string().optional().nullable(),
  finished: z.boolean(),
  id: z.number().optional(),
  mode: z.string(),
  retryOf: z.string().optional().nullable(),
  retrySuccessId: z.string().optional().nullable(),
  startedAt: z.string().optional().nullable(),
  status: z.string(),
  stoppedAt: z.string().optional().nullable(),
  waitTill: z.string().optional().nullable(),
  workflowId: z.string(),
});

export const systemExecutionEntityUpdateSchema = z.object({
  createdAt: z.string().optional(),
  deletedAt: z.string().optional().nullable(),
  finished: z.boolean().optional(),
  id: z.number().optional(),
  mode: z.string().optional(),
  retryOf: z.string().optional().nullable(),
  retrySuccessId: z.string().optional().nullable(),
  startedAt: z.string().optional().nullable(),
  status: z.string().optional(),
  stoppedAt: z.string().optional().nullable(),
  waitTill: z.string().optional().nullable(),
  workflowId: z.string().optional(),
});

export const systemExecutionEntityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_execution_entity_workflow_id"),
    columns: z.tuple([z.literal("workflowId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemExecutionMetadataRowSchema = z.object({
  executionId: z.number(),
  id: z.number(),
  key: z.string(),
  value: z.string(),
});

export const systemExecutionMetadataInsertSchema = z.object({
  executionId: z.number(),
  id: z.number().optional(),
  key: z.string(),
  value: z.string(),
});

export const systemExecutionMetadataUpdateSchema = z.object({
  executionId: z.number().optional(),
  id: z.number().optional(),
  key: z.string().optional(),
  value: z.string().optional(),
});

export const systemExecutionMetadataRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_31d0b4c93fb85ced26f6005cda3"),
    columns: z.tuple([z.literal("executionId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("execution_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemFolderRowSchema = z.object({
  createdAt: z.string(),
  id: z.string(),
  name: z.string(),
  parentFolderId: z.string().nullable(),
  projectId: z.string(),
  updatedAt: z.string(),
});

export const systemFolderInsertSchema = z.object({
  createdAt: z.string().optional(),
  id: z.string(),
  name: z.string(),
  parentFolderId: z.string().optional().nullable(),
  projectId: z.string(),
  updatedAt: z.string().optional(),
});

export const systemFolderUpdateSchema = z.object({
  createdAt: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  parentFolderId: z.string().optional().nullable(),
  projectId: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const systemFolderRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_804ea52f6729e3940498bd54d78"),
    columns: z.tuple([z.literal("parentFolderId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("folder"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("FK_a8260b0b36939c6247f385b8221"),
    columns: z.tuple([z.literal("projectId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("project"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemFolderTagRowSchema = z.object({
  folderId: z.string(),
  tagId: z.string(),
});

export const systemFolderTagInsertSchema = z.object({
  folderId: z.string(),
  tagId: z.string(),
});

export const systemFolderTagUpdateSchema = z.object({
  folderId: z.string().optional(),
  tagId: z.string().optional(),
});

export const systemFolderTagRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_94a60854e06f2897b2e0d39edba"),
    columns: z.tuple([z.literal("folderId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("folder"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("FK_dc88164176283de80af47621746"),
    columns: z.tuple([z.literal("tagId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tag_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemInsightsByPeriodRowSchema = z.object({
  id: z.number(),
  metaId: z.number(),
  periodStart: z.string().nullable(),
  periodUnit: z.number(),
  type: z.number(),
  value: z.number(),
});

export const systemInsightsByPeriodInsertSchema = z.object({
  id: z.number().optional(),
  metaId: z.number(),
  periodStart: z.string().optional().nullable(),
  periodUnit: z.number(),
  type: z.number(),
  value: z.number(),
});

export const systemInsightsByPeriodUpdateSchema = z.object({
  id: z.number().optional(),
  metaId: z.number().optional(),
  periodStart: z.string().optional().nullable(),
  periodUnit: z.number().optional(),
  type: z.number().optional(),
  value: z.number().optional(),
});

export const systemInsightsByPeriodRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_6414cfed98daabbfdd61a1cfbc0"),
    columns: z.tuple([z.literal("metaId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("insights_metadata"),
    referencedColumns: z.tuple([z.literal("metaId")]),
  }),
]);

export const systemInsightsMetadataRowSchema = z.object({
  metaId: z.number(),
  projectId: z.string().nullable(),
  projectName: z.string(),
  workflowId: z.string().nullable(),
  workflowName: z.string(),
});

export const systemInsightsMetadataInsertSchema = z.object({
  metaId: z.number().optional(),
  projectId: z.string().optional().nullable(),
  projectName: z.string(),
  workflowId: z.string().optional().nullable(),
  workflowName: z.string(),
});

export const systemInsightsMetadataUpdateSchema = z.object({
  metaId: z.number().optional(),
  projectId: z.string().optional().nullable(),
  projectName: z.string().optional(),
  workflowId: z.string().optional().nullable(),
  workflowName: z.string().optional(),
});

export const systemInsightsMetadataRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_1d8ab99d5861c9388d2dc1cf733"),
    columns: z.tuple([z.literal("workflowId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("FK_2375a1eda085adb16b24615b69c"),
    columns: z.tuple([z.literal("projectId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("project"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemInsightsRawRowSchema = z.object({
  id: z.number(),
  metaId: z.number(),
  timestamp: z.string(),
  type: z.number(),
  value: z.number(),
});

export const systemInsightsRawInsertSchema = z.object({
  id: z.number().optional(),
  metaId: z.number(),
  timestamp: z.string().optional(),
  type: z.number(),
  value: z.number(),
});

export const systemInsightsRawUpdateSchema = z.object({
  id: z.number().optional(),
  metaId: z.number().optional(),
  timestamp: z.string().optional(),
  type: z.number().optional(),
  value: z.number().optional(),
});

export const systemInsightsRawRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_6e2e33741adef2a7c5d66befa4e"),
    columns: z.tuple([z.literal("metaId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("insights_metadata"),
    referencedColumns: z.tuple([z.literal("metaId")]),
  }),
]);

export const systemInstalledNodesRowSchema = z.object({
  latestVersion: z.number(),
  name: z.string(),
  package: z.string(),
  type: z.string(),
});

export const systemInstalledNodesInsertSchema = z.object({
  latestVersion: z.number().optional(),
  name: z.string(),
  package: z.string(),
  type: z.string(),
});

export const systemInstalledNodesUpdateSchema = z.object({
  latestVersion: z.number().optional(),
  name: z.string().optional(),
  package: z.string().optional(),
  type: z.string().optional(),
});

export const systemInstalledNodesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_73f857fc5dce682cef8a99c11dbddbc969618951"),
    columns: z.tuple([z.literal("package")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("installed_packages"),
    referencedColumns: z.tuple([z.literal("packageName")]),
  }),
]);

export const systemInstalledPackagesRowSchema = z.object({
  authorEmail: z.string().nullable(),
  authorName: z.string().nullable(),
  createdAt: z.string(),
  installedVersion: z.string(),
  packageName: z.string(),
  updatedAt: z.string(),
});

export const systemInstalledPackagesInsertSchema = z.object({
  authorEmail: z.string().optional().nullable(),
  authorName: z.string().optional().nullable(),
  createdAt: z.string().optional(),
  installedVersion: z.string(),
  packageName: z.string(),
  updatedAt: z.string().optional(),
});

export const systemInstalledPackagesUpdateSchema = z.object({
  authorEmail: z.string().optional().nullable(),
  authorName: z.string().optional().nullable(),
  createdAt: z.string().optional(),
  installedVersion: z.string().optional(),
  packageName: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const systemInvalidAuthTokenRowSchema = z.object({
  expiresAt: z.string(),
  token: z.string(),
});

export const systemInvalidAuthTokenInsertSchema = z.object({
  expiresAt: z.string(),
  token: z.string(),
});

export const systemInvalidAuthTokenUpdateSchema = z.object({
  expiresAt: z.string().optional(),
  token: z.string().optional(),
});

export const systemMicrosoftGraphSubscriptionsRowSchema = z.object({
  expiration_date: z.string(),
  subscription_id: z.string(),
});

export const systemMicrosoftGraphSubscriptionsInsertSchema = z.object({
  expiration_date: z.string(),
  subscription_id: z.string().optional(),
});

export const systemMicrosoftGraphSubscriptionsUpdateSchema = z.object({
  expiration_date: z.string().optional(),
  subscription_id: z.string().optional(),
});

export const systemMigrationsRowSchema = z.object({
  id: z.number(),
  name: z.string(),
  timestamp: z.number(),
});

export const systemMigrationsInsertSchema = z.object({
  id: z.number().optional(),
  name: z.string(),
  timestamp: z.number(),
});

export const systemMigrationsUpdateSchema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  timestamp: z.number().optional(),
});

export const systemProcessedDataRowSchema = z.object({
  context: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  value: z.string(),
  workflowId: z.string(),
});

export const systemProcessedDataInsertSchema = z.object({
  context: z.string(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  value: z.string(),
  workflowId: z.string(),
});

export const systemProcessedDataUpdateSchema = z.object({
  context: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  value: z.string().optional(),
  workflowId: z.string().optional(),
});

export const systemProcessedDataRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_06a69a7032c97a763c2c7599464"),
    columns: z.tuple([z.literal("workflowId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemProjectRowSchema = z.object({
  createdAt: z.string(),
  description: z.string().nullable(),
  icon: jsonSchema.nullable(),
  id: z.string(),
  name: z.string(),
  type: z.string(),
  updatedAt: z.string(),
});

export const systemProjectInsertSchema = z.object({
  createdAt: z.string().optional(),
  description: z.string().optional().nullable(),
  icon: jsonSchema.optional().nullable(),
  id: z.string(),
  name: z.string(),
  type: z.string(),
  updatedAt: z.string().optional(),
});

export const systemProjectUpdateSchema = z.object({
  createdAt: z.string().optional(),
  description: z.string().optional().nullable(),
  icon: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const systemProjectRelationRowSchema = z.object({
  createdAt: z.string(),
  projectId: z.string(),
  role: z.string(),
  updatedAt: z.string(),
  userId: z.string(),
});

export const systemProjectRelationInsertSchema = z.object({
  createdAt: z.string().optional(),
  projectId: z.string(),
  role: z.string(),
  updatedAt: z.string().optional(),
  userId: z.string(),
});

export const systemProjectRelationUpdateSchema = z.object({
  createdAt: z.string().optional(),
  projectId: z.string().optional(),
  role: z.string().optional(),
  updatedAt: z.string().optional(),
  userId: z.string().optional(),
});

export const systemProjectRelationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_5f0643f6717905a05164090dde7"),
    columns: z.tuple([z.literal("userId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("FK_61448d56d61802b5dfde5cdb002"),
    columns: z.tuple([z.literal("projectId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("project"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemSettingsRowSchema = z.object({
  key: z.string(),
  loadOnStartup: z.boolean(),
  value: z.string(),
});

export const systemSettingsInsertSchema = z.object({
  key: z.string(),
  loadOnStartup: z.boolean().optional(),
  value: z.string(),
});

export const systemSettingsUpdateSchema = z.object({
  key: z.string().optional(),
  loadOnStartup: z.boolean().optional(),
  value: z.string().optional(),
});

export const systemSharedCredentialsRowSchema = z.object({
  createdAt: z.string(),
  credentialsId: z.string(),
  projectId: z.string(),
  role: z.string(),
  updatedAt: z.string(),
});

export const systemSharedCredentialsInsertSchema = z.object({
  createdAt: z.string().optional(),
  credentialsId: z.string(),
  projectId: z.string(),
  role: z.string(),
  updatedAt: z.string().optional(),
});

export const systemSharedCredentialsUpdateSchema = z.object({
  createdAt: z.string().optional(),
  credentialsId: z.string().optional(),
  projectId: z.string().optional(),
  role: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const systemSharedCredentialsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_416f66fc846c7c442970c094ccf"),
    columns: z.tuple([z.literal("credentialsId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("credentials_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("FK_812c2852270da1247756e77f5a4"),
    columns: z.tuple([z.literal("projectId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("project"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemSharedWorkflowRowSchema = z.object({
  createdAt: z.string(),
  projectId: z.string(),
  role: z.string(),
  updatedAt: z.string(),
  workflowId: z.string(),
});

export const systemSharedWorkflowInsertSchema = z.object({
  createdAt: z.string().optional(),
  projectId: z.string(),
  role: z.string(),
  updatedAt: z.string().optional(),
  workflowId: z.string(),
});

export const systemSharedWorkflowUpdateSchema = z.object({
  createdAt: z.string().optional(),
  projectId: z.string().optional(),
  role: z.string().optional(),
  updatedAt: z.string().optional(),
  workflowId: z.string().optional(),
});

export const systemSharedWorkflowRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_a45ea5f27bcfdc21af9b4188560"),
    columns: z.tuple([z.literal("projectId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("project"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("FK_daa206a04983d47d0a9c34649ce"),
    columns: z.tuple([z.literal("workflowId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemTagEntityRowSchema = z.object({
  createdAt: z.string(),
  id: z.string(),
  name: z.string(),
  updatedAt: z.string(),
});

export const systemTagEntityInsertSchema = z.object({
  createdAt: z.string().optional(),
  id: z.string(),
  name: z.string(),
  updatedAt: z.string().optional(),
});

export const systemTagEntityUpdateSchema = z.object({
  createdAt: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const systemTestCaseExecutionRowSchema = z.object({
  completedAt: z.string().nullable(),
  createdAt: z.string(),
  errorCode: z.string().nullable(),
  errorDetails: jsonSchema.nullable(),
  executionId: z.number().nullable(),
  id: z.string(),
  metrics: jsonSchema.nullable(),
  runAt: z.string().nullable(),
  status: z.string(),
  testRunId: z.string(),
  updatedAt: z.string(),
});

export const systemTestCaseExecutionInsertSchema = z.object({
  completedAt: z.string().optional().nullable(),
  createdAt: z.string().optional(),
  errorCode: z.string().optional().nullable(),
  errorDetails: jsonSchema.optional().nullable(),
  executionId: z.number().optional().nullable(),
  id: z.string(),
  metrics: jsonSchema.optional().nullable(),
  runAt: z.string().optional().nullable(),
  status: z.string(),
  testRunId: z.string(),
  updatedAt: z.string().optional(),
});

export const systemTestCaseExecutionUpdateSchema = z.object({
  completedAt: z.string().optional().nullable(),
  createdAt: z.string().optional(),
  errorCode: z.string().optional().nullable(),
  errorDetails: jsonSchema.optional().nullable(),
  executionId: z.number().optional().nullable(),
  id: z.string().optional(),
  metrics: jsonSchema.optional().nullable(),
  runAt: z.string().optional().nullable(),
  status: z.string().optional(),
  testRunId: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const systemTestCaseExecutionRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_8e4b4774db42f1e6dda3452b2af"),
    columns: z.tuple([z.literal("testRunId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("test_run"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("FK_e48965fac35d0f5b9e7f51d8c44"),
    columns: z.tuple([z.literal("executionId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("execution_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemTestRunRowSchema = z.object({
  completedAt: z.string().nullable(),
  createdAt: z.string(),
  errorCode: z.string().nullable(),
  errorDetails: jsonSchema.nullable(),
  id: z.string(),
  metrics: jsonSchema.nullable(),
  runAt: z.string().nullable(),
  status: z.string(),
  updatedAt: z.string(),
  workflowId: z.string(),
});

export const systemTestRunInsertSchema = z.object({
  completedAt: z.string().optional().nullable(),
  createdAt: z.string().optional(),
  errorCode: z.string().optional().nullable(),
  errorDetails: jsonSchema.optional().nullable(),
  id: z.string(),
  metrics: jsonSchema.optional().nullable(),
  runAt: z.string().optional().nullable(),
  status: z.string(),
  updatedAt: z.string().optional(),
  workflowId: z.string(),
});

export const systemTestRunUpdateSchema = z.object({
  completedAt: z.string().optional().nullable(),
  createdAt: z.string().optional(),
  errorCode: z.string().optional().nullable(),
  errorDetails: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  metrics: jsonSchema.optional().nullable(),
  runAt: z.string().optional().nullable(),
  status: z.string().optional(),
  updatedAt: z.string().optional(),
  workflowId: z.string().optional(),
});

export const systemTestRunRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_d6870d3b6e4c185d33926f423c8"),
    columns: z.tuple([z.literal("workflowId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemUserRowSchema = z.object({
  createdAt: z.string(),
  disabled: z.boolean(),
  email: z.string().nullable(),
  firstName: z.string().nullable(),
  id: z.string(),
  lastActiveAt: z.string().nullable(),
  lastName: z.string().nullable(),
  mfaEnabled: z.boolean(),
  mfaRecoveryCodes: z.string().nullable(),
  mfaSecret: z.string().nullable(),
  password: z.string().nullable(),
  personalizationAnswers: jsonSchema.nullable(),
  role: z.string(),
  settings: jsonSchema.nullable(),
  updatedAt: z.string(),
});

export const systemUserInsertSchema = z.object({
  createdAt: z.string().optional(),
  disabled: z.boolean().optional(),
  email: z.string().optional().nullable(),
  firstName: z.string().optional().nullable(),
  id: z.string().optional(),
  lastActiveAt: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  mfaEnabled: z.boolean().optional(),
  mfaRecoveryCodes: z.string().optional().nullable(),
  mfaSecret: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  personalizationAnswers: jsonSchema.optional().nullable(),
  role: z.string(),
  settings: jsonSchema.optional().nullable(),
  updatedAt: z.string().optional(),
});

export const systemUserUpdateSchema = z.object({
  createdAt: z.string().optional(),
  disabled: z.boolean().optional(),
  email: z.string().optional().nullable(),
  firstName: z.string().optional().nullable(),
  id: z.string().optional(),
  lastActiveAt: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  mfaEnabled: z.boolean().optional(),
  mfaRecoveryCodes: z.string().optional().nullable(),
  mfaSecret: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  personalizationAnswers: jsonSchema.optional().nullable(),
  role: z.string().optional(),
  settings: jsonSchema.optional().nullable(),
  updatedAt: z.string().optional(),
});

export const systemUserApiKeysRowSchema = z.object({
  apiKey: z.string(),
  createdAt: z.string(),
  id: z.string(),
  label: z.string(),
  scopes: jsonSchema.nullable(),
  updatedAt: z.string(),
  userId: z.string(),
});

export const systemUserApiKeysInsertSchema = z.object({
  apiKey: z.string(),
  createdAt: z.string().optional(),
  id: z.string(),
  label: z.string(),
  scopes: jsonSchema.optional().nullable(),
  updatedAt: z.string().optional(),
  userId: z.string(),
});

export const systemUserApiKeysUpdateSchema = z.object({
  apiKey: z.string().optional(),
  createdAt: z.string().optional(),
  id: z.string().optional(),
  label: z.string().optional(),
  scopes: jsonSchema.optional().nullable(),
  updatedAt: z.string().optional(),
  userId: z.string().optional(),
});

export const systemUserApiKeysRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_e131705cbbc8fb589889b02d457"),
    columns: z.tuple([z.literal("userId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemVariablesRowSchema = z.object({
  id: z.string(),
  key: z.string(),
  type: z.string(),
  value: z.string().nullable(),
});

export const systemVariablesInsertSchema = z.object({
  id: z.string(),
  key: z.string(),
  type: z.string().optional(),
  value: z.string().optional().nullable(),
});

export const systemVariablesUpdateSchema = z.object({
  id: z.string().optional(),
  key: z.string().optional(),
  type: z.string().optional(),
  value: z.string().optional().nullable(),
});

export const systemWebhookEntityRowSchema = z.object({
  method: z.string(),
  node: z.string(),
  pathLength: z.number().nullable(),
  webhookId: z.string().nullable(),
  webhookPath: z.string(),
  workflowId: z.string(),
});

export const systemWebhookEntityInsertSchema = z.object({
  method: z.string(),
  node: z.string(),
  pathLength: z.number().optional().nullable(),
  webhookId: z.string().optional().nullable(),
  webhookPath: z.string(),
  workflowId: z.string(),
});

export const systemWebhookEntityUpdateSchema = z.object({
  method: z.string().optional(),
  node: z.string().optional(),
  pathLength: z.number().optional().nullable(),
  webhookId: z.string().optional().nullable(),
  webhookPath: z.string().optional(),
  workflowId: z.string().optional(),
});

export const systemWebhookEntityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_webhook_entity_workflow_id"),
    columns: z.tuple([z.literal("workflowId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemWorkflowEntityRowSchema = z.object({
  active: z.boolean(),
  connections: jsonSchema,
  createdAt: z.string(),
  id: z.string(),
  isArchived: z.boolean(),
  meta: jsonSchema.nullable(),
  name: z.string(),
  nodes: jsonSchema,
  parentFolderId: z.string().nullable(),
  pinData: jsonSchema.nullable(),
  settings: jsonSchema.nullable(),
  staticData: jsonSchema.nullable(),
  triggerCount: z.number(),
  updatedAt: z.string(),
  versionId: z.string().nullable(),
});

export const systemWorkflowEntityInsertSchema = z.object({
  active: z.boolean(),
  connections: jsonSchema,
  createdAt: z.string().optional(),
  id: z.string(),
  isArchived: z.boolean().optional(),
  meta: jsonSchema.optional().nullable(),
  name: z.string(),
  nodes: jsonSchema,
  parentFolderId: z.string().optional().nullable(),
  pinData: jsonSchema.optional().nullable(),
  settings: jsonSchema.optional().nullable(),
  staticData: jsonSchema.optional().nullable(),
  triggerCount: z.number().optional(),
  updatedAt: z.string().optional(),
  versionId: z.string().optional().nullable(),
});

export const systemWorkflowEntityUpdateSchema = z.object({
  active: z.boolean().optional(),
  connections: jsonSchema.optional(),
  createdAt: z.string().optional(),
  id: z.string().optional(),
  isArchived: z.boolean().optional(),
  meta: jsonSchema.optional().nullable(),
  name: z.string().optional(),
  nodes: jsonSchema.optional(),
  parentFolderId: z.string().optional().nullable(),
  pinData: jsonSchema.optional().nullable(),
  settings: jsonSchema.optional().nullable(),
  staticData: jsonSchema.optional().nullable(),
  triggerCount: z.number().optional(),
  updatedAt: z.string().optional(),
  versionId: z.string().optional().nullable(),
});

export const systemWorkflowEntityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_workflow_parent_folder"),
    columns: z.tuple([z.literal("parentFolderId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("folder"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemWorkflowHistoryRowSchema = z.object({
  authors: z.string(),
  connections: jsonSchema,
  createdAt: z.string(),
  nodes: jsonSchema,
  updatedAt: z.string(),
  versionId: z.string(),
  workflowId: z.string(),
});

export const systemWorkflowHistoryInsertSchema = z.object({
  authors: z.string(),
  connections: jsonSchema,
  createdAt: z.string().optional(),
  nodes: jsonSchema,
  updatedAt: z.string().optional(),
  versionId: z.string(),
  workflowId: z.string(),
});

export const systemWorkflowHistoryUpdateSchema = z.object({
  authors: z.string().optional(),
  connections: jsonSchema.optional(),
  createdAt: z.string().optional(),
  nodes: jsonSchema.optional(),
  updatedAt: z.string().optional(),
  versionId: z.string().optional(),
  workflowId: z.string().optional(),
});

export const systemWorkflowHistoryRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("FK_1e31657f5fe46816c34be7c1b4b"),
    columns: z.tuple([z.literal("workflowId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemWorkflowStatisticsRowSchema = z.object({
  count: z.number().nullable(),
  latestEvent: z.string().nullable(),
  name: z.string(),
  rootCount: z.number().nullable(),
  workflowId: z.string(),
});

export const systemWorkflowStatisticsInsertSchema = z.object({
  count: z.number().optional().nullable(),
  latestEvent: z.string().optional().nullable(),
  name: z.string(),
  rootCount: z.number().optional().nullable(),
  workflowId: z.string(),
});

export const systemWorkflowStatisticsUpdateSchema = z.object({
  count: z.number().optional().nullable(),
  latestEvent: z.string().optional().nullable(),
  name: z.string().optional(),
  rootCount: z.number().optional().nullable(),
  workflowId: z.string().optional(),
});

export const systemWorkflowStatisticsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_workflow_statistics_workflow_id"),
    columns: z.tuple([z.literal("workflowId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const systemWorkflowsTagsRowSchema = z.object({
  tagId: z.string(),
  workflowId: z.string(),
});

export const systemWorkflowsTagsInsertSchema = z.object({
  tagId: z.string(),
  workflowId: z.string(),
});

export const systemWorkflowsTagsUpdateSchema = z.object({
  tagId: z.string().optional(),
  workflowId: z.string().optional(),
});

export const systemWorkflowsTagsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_workflows_tags_tag_id"),
    columns: z.tuple([z.literal("tagId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tag_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("fk_workflows_tags_workflow_id"),
    columns: z.tuple([z.literal("workflowId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workflow_entity"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);
