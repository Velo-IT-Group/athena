import z from "zod";

export const attributeIdentifier = z.object({
    userId: z.number().or(z.string()).optional(),
    companyId: z.number().or(z.string()).optional(),
    name: z.string(),
    territoryName: z.string().default("Alpha"),
});

export const voiceAttributesSchema = z.discriminatedUnion("direction", [
    z.object({
        ...attributeIdentifier.shape,
        direction: z.literal("inbound"),
        from_country: z.string(),
        called: z.string(),
        to_country: z.string(),
        to_city: z.string(),
        taskType: z.enum(["voicemail"]).optional(),
        conversations: z.object({
            hang_up_by: z.string(),
            in_business_hours: z.string(),
        }),
        to_state: z.string(),
        caller_country: z.string(),
        userLastName: z.string(),
        call_sid: z.string(),
        account_sid: z.string(),
        from_zip: z.string(),
        from: z.string(),
        customers: z.object({
            phone: z.string(),
            organization: z.string(),
            name: z.string(),
            external_id: z.string(),
        }),
        called_zip: z.string(),
        caller_state: z.string(),
        to_zip: z.string(),
        called_country: z.string(),
        from_city: z.string(),
        team: z.string(),
        userFirstName: z.string(),
        called_city: z.string(),
        caller_zip: z.string(),
        api_version: z.string(),
        called_state: z.string(),
        from_state: z.string(),
        caller: z.string(),
        caller_city: z.string(),
        to: z.string(),
        conference: z.object({
            sid: z.string(),
            participants: z.object({
                worker: z.string(),
                customer: z.string(),
            }),
        }).optional(),
    }),
    z.object({
        ...attributeIdentifier.shape,
        direction: z.literal("outbound"),
        from: z.string(),
        to: z.string(),
        conference: z.object({
            sid: z.string(),
            participants: z.object({
                worker: z.string(),
                customer: z.string(),
                transfer: z.string().optional(),
            }),
        }).optional(),
    }),
]);

export type VoiceAttributes = z.infer<typeof voiceAttributesSchema>;

export const createEngagementSchema = z.object({
    to: z.string(),
    from: z.string(),
    channel: z.enum(["sms", "voice"]),
    direction: z.enum(["inbound", "outbound"]),
    workerSid: z.string().optional(),
}).extend(attributeIdentifier.shape);

export type CreateEngagement = z.infer<typeof createEngagementSchema>;

export const taskEventStreamSchema = z.object({
    specversion: z.string(),
    type: z.string(),
    source: z.string(),
    id: z.string(),
    dataschema: z.string(),
    datacontenttype: z.string(),
    time: z.string(),
    data: z.object({
        name: z.string(),
        timestamp: z.string(),
        product_name: z.string(),
        publisher: z.string(),
        account_sid: z.string(),
        level: z.string(),
        payload: z.object({
            event_description: z.string(),
            task_channel_unique_name: z.string(),
            task_priority: z.number(),
            workspace_sid: z.string(),
            task_canceled_reason: z.string(),
            workflow_sid: z.string(),
            task_assignment_status: z.string(),
            task_add_on_attributes: z.string(),
            task_queue_target_expression: z.string(),
            eventtype: z.string(),
            task_channel_sid: z.string(),
            task_virtual_start_time: z.string(),
            timestamp: z.string(),
            task_queue_sid: z.string(),
            resource_type: z.string(),
            workflow_name: z.string(),
            task_queue_name: z.string(),
            task_version: z.number(),
            workspace_name: z.string(),
            task_age: z.number(),
            operating_unit_sid: z.string(),
            task_routing_target: z.string(),
            account_sid: z.string(),
            task_timeout: z.number(),
            task_attributes: z.string(),
            task_date_created: z.string(),
            task_sid: z.string(),
            sid: z.string(),
            task_age_in_queue: z.number(),
            task_queue_entered_date: z.string(),
        }),
        payload_type: z.string(),
        group: z.string(),
        sid: z.string(),
    }),
});

export const reservationEventStreamSchema = z.object({
    specversion: z.string(),
    type: z.string(),
    source: z.string(),
    id: z.string(),
    dataschema: z.string(),
    datacontenttype: z.string(),
    time: z.string(),
    data: z.object({
        name: z.string(),
        timestamp: z.string(),
        publisher_metadata: z.string(),
        product_name: z.string(),
        publisher: z.string(),
        account_sid: z.string(),
        level: z.string(),
        payload: z.object({
            worker_available: z.boolean(),
            event_description: z.string(),
            task_channel_unique_name: z.string(),
            task_priority: z.number(),
            workspace_sid: z.string(),
            task_canceled_reason: z.string(),
            workflow_sid: z.string(),
            task_assignment_status: z.string(),
            task_add_on_attributes: z.string(),
            task_queue_target_expression: z.string(),
            eventtype: z.string(),
            worker_version: z.number(),
            task_channel_sid: z.string(),
            task_virtual_start_time: z.string(),
            timestamp: z.string(),
            task_queue_sid: z.string(),
            worker_name: z.string(),
            resource_type: z.string(),
            reservation_timeout: z.number(),
            worker_channel_capacity: z.number(),
            workflow_name: z.string(),
            task_queue_name: z.string(),
            task_version: z.number(),
            reservation_sid: z.string(),
            worker_activity_sid: z.string(),
            workspace_name: z.string(),
            task_age: z.number(),
            operating_unit_sid: z.string(),
            resource_sid: z.string(),
            account_sid: z.string(),
            task_timeout: z.number(),
            task_attributes: z.string(),
            reservation_version: z.number(),
            worker_channel_consumed_capacity: z.number(),
            task_date_created: z.string(),
            reservation_reason_code: z.number(),
            task_sid: z.string(),
            worker_sid: z.string(),
            sid: z.string(),
            worker_attributes: z.string(),
            task_age_in_queue: z.number(),
            worker_activity_name: z.string(),
            reservation_status: z.string(),
            task_queue_entered_date: z.string(),
        }),
        payload_type: z.string(),
        group: z.string(),
        sid: z.string(),
    }),
});

export type TaskEventStream = z.infer<typeof taskEventStreamSchema>;
export type ReservationEventStream = z.infer<
    typeof reservationEventStreamSchema
>;

export * from "./worker";
